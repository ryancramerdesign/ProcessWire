<?php

/**
 * ProcessWire Page Sort Process
 *
 * Saves moved or sorted pages for the PageList process. 
 * Intended to be executed via an ajax call. 
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageSort extends Process {

	protected $ids; 
	protected $parent_id; 
	protected $move_id; 
	protected $user; 
	protected $isMoved = false;

	public static function getModuleInfo() {
		return array(
			'title' => __('Page Sort and Move', __FILE__), // getModuleInfo title
			'summary' => __('Handles page sorting and moving for PageList', __FILE__), // getModuleInfo summary
			'version' => 100, 
			'permanent' => true, 
			'permission' => 'page-edit',
			); 
	}

	/**
	 * Install a new permission in addition to the regular ProcessPageSort permission
	 *
	 * The "ProcessPageSortMove" permission refers to changing the page's parent,
	 * whereas the "ProcessPageSort" permission refers to changing the sort within the same parent. 
	 *
	 */
	public function ___install() {
		parent::___install();
	}

	/**
	 * Save a move/sort request
	 *
	 */
	public function ___execute() {

		if($this->config->demo) throw new WireException($this->_("Your change was not saved because this site is in demo mode")); 
		if(!isset($_POST['sort'])) throw new WireException($this->_("This Process is only accessible via POST")); 
		$this->session->CSRF->validate(); // throws exception if invalid

		$this->user = $this->fuel('user'); 
		$this->ids = explode(',', $_POST['sort']); 
		foreach($this->ids as $k => $v) $this->ids[(int) $k] = (int) $v; 
		if(!count($this->ids)) return; 

		$this->parent_id = (int) $_POST['parent_id']; 
		$this->move_id = (int) $_POST['id'];
			
		$parentPage = $this->fuel('pages')->get($this->parent_id);
		$movePage = $this->fuel('pages')->get($this->move_id); 

		$this->movePage($movePage, $parentPage); 
		$this->sortPages($movePage, $parentPage); 
	}	

	/**
	 * Saves a page that has had it's parent_id changed
	 *
	 */
	protected function movePage(Page $page, Page $parent) {

		if($page->parent_id == $parent->id) return;

		if(!$page->moveable($parent)) 
			throw new WirePermissionException($this->_("You do not have permission to move pages using this parent") . " - {$parent->path}"); 

		$page->setOutputFormatting(false); 
		$page->resetTrackChanges(true); 
		$page->parent = $parent; 
		$page->save();
		$this->message("Moved page $page to parent $parent"); 
		$this->isMoved = true;
	}

	/**
	 * Updates the sortfield for all pages having the same parent
	 *
	 */
	protected function sortPages(Page $page, Page $parent) {

		if(!$page->sortable()) { 
			if(!$this->isMoved) throw new WirePermissionException($this->_("You do not have permission to sort pages using this parent") . " - {$parent->path}"); 
			return;
		}

		if($parent->sortfield && $parent->sortfield != 'sort') {
			$msg = sprintf($this->_("Your sort was not saved because these pages are automatically sorted by %s."), $parent->sortfield);
			if(!$this->isMoved) throw new WireException($msg); 
				else $this->message($msg); 
			return;
		}

		$changes = 0; 

		foreach($parent->children("status<" . Page::statusMax) as $child) {
			$sort = array_search((int) $child->id, $this->ids, true); 		
			if($sort === false) continue; 

			if($child->sort != $sort) {
				$child->setOutputFormatting(false); 
				$child->resetTrackChanges(true);
				$child->sort = $sort; 	
				$child->save();
			}

			$changes++; 
		}

		if($changes) $this->message("Updated sort for $changes pages"); 
		
	}
	
}

