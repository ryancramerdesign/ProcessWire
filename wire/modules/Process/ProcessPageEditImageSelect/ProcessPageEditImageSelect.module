<?php

/**
 * ProcessWire Image Select + Edit Process
 *
 * Provides the image selecting and editing capability for the TinyMCE Inputfield
 * Works in combination with /modules/Inputfield/InputfieldTinyMCE/plugins/pwimage/editor_plugin.js
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageEditImageSelect extends Process implements ConfigurableModule {

	protected $maxImageWidth = 835; 
	protected $page = null;
	protected $defaultClass = 'Pageimage';
	protected $file = '';
	protected $editWidth = 0;
	protected $editHeight = 0;

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Image',          
			'summary' => 'Provides an image select capability as used by some Fieldtype modules (like TinyMCE)', 
			'version' => 103, 
			'permanent' => true, 
			'permission' => 'page-edit',
			);
	}

	protected static $defaultConfig = array(
		'noSizeAttrs' => 0,
		'alignLeftClass' => 'align_left',
		'alignRightClass' => 'align_right',
		'alignCenterClass' => 'align_center'
		);

	public function __construct() {
		foreach(self::$defaultConfig as $key => $value) $this->set($key, $value); 
	}

	public function init() {

		if($this->config->demo) throw new WireException("Sorry, image editing functions are disabled in demo mode"); 

		$this->modules->get("ProcessPageList");
		$id = (int) $this->input->get->id; 

		// if no ID was specified, then retrieive ID from filename path, if it's there
		if($this->input->get->file) {
			if(preg_match('{(\d+)[/,][^/,]+\.(jpe?g|gif|png)$}iD', $this->input->get->file, $matches)) {
				$id = (int) $matches[1]; 

			} else if(preg_match('{^' . wire('config')->urls->root . '([-_./a-zA-Z0-9]*/)' . wire('config')->pagefileUrlPrefix . 
				'[^/]+\.(jpe?g|gif|png)$}iD', $this->input->get->file, $matches)) {
				// pagefileSecure URL format, with page path in the URL
				$this->page = wire('pages')->get('/' . $matches[1]);
				$id = $this->page->id;
			}
		}

		if(!$id) throw new WireException("No page specified");
		if(!$this->page) $this->page = $this->pages->get($id); 
		if(!$this->page) throw new WireException("No page specified"); 
		if(!$this->page->id) throw new WireException("Unknown page"); 

		// note we use hasPermission('page-view') rather than viewable() here becuase we want to allow pages without template files
		if(!$this->user->hasPermission('page-view', $this->page)) throw new WireException("You do not have access to images on this page"); 

		if($this->input->get->winwidth) $this->maxImageWidth = ((int) $this->input->get->winwidth) - 70; 
		if($this->maxImageWidth < 400) $this->maxImageWidth = 400; 

		parent::init();
	}

	public function getPageimage() {

		$images = $this->getImages($this->page);
		$filename = basename($this->input->get->file); 
		if(strpos($filename, ',') === false) $filename = $this->page->id . ',' . $filename; // prepend ID if it's not there, needed for ajax in-editor resize
		if(!preg_match('/\.(jpe?g|gif|png)$/iD', $filename, $matches)) throw new WireException("Unknown image file"); 

		// get the original, non resized version, if present
		if(preg_match('/(\.(\d+)x(\d+))\.' . $matches[1] . '$/', $filename, $matches)) {
			$this->editWidth = (int) $matches[2];
			$this->editHeight = (int) $matches[3]; 
			$filename = str_replace($matches[1], '', $filename);
		}
		if(!array_key_exists($filename, $images)) throw new WireException("Invalid image file: $filename"); 
		return $images[$filename]; 
	}


	public function getImages(Page $page, $level = 0) {

		$allImages = array();
		$numImages = 0;
		$numImageFields = 0;

		iF(!$page->id) return $allImages; 

		foreach($page->fields as $field) {

			if($field->type instanceof FieldtypeRepeater) {
				// get images that are possibly in a repeater
				foreach($page->get($field->name) as $p) {
					$images = $this->getImages($p, $level+1); 
					if(!count($images)) continue; 
					$allImages = array_merge($allImages, $images);
					$numImages += count($images); 
					$numImageFields++;
				}
				continue; 
			}

			if(!$field->type instanceof FieldtypeImage) continue; 
			$numImageFields++;
			$images = $page->get($field->name); 
			if(!count($images)) continue; 

			foreach($images as $image) {
				$numImages++;
				$key = $page->id . ',' . $image->basename;  // page_id,basename for repeater support
				$allImages[$key] = $image; 
			}
		}

		if(!$level) {
			if(!$numImageFields) $this->message($this->_("There are no image fields on this page. Choose another page to select images from.")); // Message when page has no image fields
				else if(!$numImages) $this->message($this->_("There are no images present on this page. Close this window and upload images, or select images from another page."));  // Message when page has no images
		}

		return $allImages; 
	}

	public function ___execute() {

		if($this->config->demo) throw new WireException("Sorry, image editing functions are disabled in demo mode"); 

		if($this->input->get->file) return $this->executeEdit();
		$images = $this->getImages($this->page);

		$out = '';

		if(count($images)) {
			$winwidth = (int) $this->input->get->winwidth; 
			foreach($images as $image) {
				$width = $image->width();
				if($width > $this->maxImageWidth) $width = $this->maxImageWidth; 
				$out .= "\n\t<li><a href='./edit?file={$image->page->id},{$image->basename}&amp;modal=1&amp;id={$this->page->id}&amp;winwidth=$winwidth'>" . 
					"<img src='{$image->url}' width='$width' alt=\"{$image->description}\" /></a></li>";
			}

			$out = "\n<ul id='select_images'>$out\n</ul>";

		}

		$form = $this->modules->get("InputfieldForm");
		$form->action = "./"; 
		$form->method = "get";

		$field = $this->modules->get("InputfieldPageListSelect"); 
		$field->label = $this->_("Images on Page:") . ' ' . $this->page->get("title") . " (" . $this->page->path . ")"; // Headline for page selection, precedes current page title/url
		$field->description = $this->_("If you would like to select images from another page, select the page below."); // Instruction on how to select another page
		$field->attr('id+name', 'page_id'); 
		$field->value = $this->page->id; 
		$field->parent_id = 0; 
		$field->collapsed = count($images) ? Inputfield::collapsedYes : Inputfield::collapsedNo;
		$field->required = true; 
		$form->append($field); 

		$out = $form->render() . $out;


		return "<div id='ProcessPageEditImageSelect'>" . $out . "\n</div>";
	}

	public function ___executeEdit() {

		$attrs = array(
			'class' => '', 
			'width' => 0,
			'height' => 0, 
			); 
		$image = $this->getPageimage();
		if(!is_file($image->filename)) throw new WireException("Image file does not exist"); 
		$basename = $image->basename;
		$fullname = $image->page->id . ',' . $basename; 

		$originalWidth = $image->width();
		$originalHeight = $image->height();

		$width = (int) $this->input->get->width; 
		$height = (int) $this->input->get->height; 
		if(!$width) $width = $this->editWidth; 
		if(!$height) $height = $this->editHeight; 

		// if they aren't already working with a resized image, and it's being scaled down,
		// then add the 'resized' class to ensure that our pwimage plugin knows to perform the resize
		if(basename($this->input->get->file) == $fullname && $originalWidth > $width) $attrs['class'] .= " resized";

		$out =	"\n<form id='selected_image_settings' action='./?id={$this->page->id}&amp;file=$fullname'>" . 
			"\n\t<p id='wrap_info'>" . 
			"\n\t\t<span id='selected_image_filename'>" . htmlentities($basename, ENT_QUOTES, 'UTF-8') . "</span> &nbsp;&bull;&nbsp; " . 
			"\n\t\t<span id='selected_image_pixels'>" . 
			"\n\t\t\t<label>" . $this->_('Width:') . " <input id='input_width' class='input_pixels' type='number' size='6' step='1' min='1' max='$originalWidth' value='$width' /></label>&nbsp; " . 
			"\n\t\t\t<label>" . $this->_('Height:') . " <input id='input_height' class='input_pixels' type='number' size='6' step='1' min=1' max='$originalHeight' value='$height' /></label>" . 
			"\n\t\t</span>&nbsp; " . 
			"\n\t\t<span class='detail'>" . $this->_("You can drag also the lower right corner of the image to resize.") . "</span>" . 
			"\n\t</p>";

		$description = isset($_GET['description']) ? $this->input->get->description : $image->description; 
		if(strlen($description) > 1024) $description = substr($description, 0, 1024); 
		$description = htmlentities($description, ENT_QUOTES, "UTF-8"); 

		$out .= "\n\t<p id='wrap_description'>" . 
			"\n\t\t<label for='selected_image_description'>Description</label>" . 
			"\n\t\t<input type='text' name='selected_image_description' id='selected_image_description' class='no_focus' value=\"$description\" />" . 
			"\n\t</p>"; 

		$out .= "\n\t<p id='wrap_class'>" . 
			"\n\t\t<select id='selected_image_class' name='class'>" . 
			"\n\t\t\t<option>" . $this->_('No Alignment') . "</option>"; 

		$optionalClasses = array(
			$this->alignLeftClass => $this->_('Align Left'),
			$this->alignRightClass => $this->_('Align Right'),
			$this->alignCenterClass => $this->_('Align Center'),
			);

		foreach($optionalClasses as $class => $label) {
			$selected = $this->input->get->class == $class ? " selected='selected'" : '';
			if($selected) $attrs['class'] .= " $class";
			$out .= "\n\t\t\t<option$selected value='$class'>$label</option>";
		}

		$out .= "\n\t\t</select>" . 
			"\n\t</p>"; 

		if(!$width && $image->width() > $this->maxImageWidth) {	
			$width = $this->maxImageWidth; 
			$height = floor(($width / $image->width()) * $image->height()); // $height = 0; 
		}

		if($width) $attrs['width'] = $width; 
		if($width && $height) $attrs['height'] = $height; 

		if($width != $originalWidth) { 
			$checked = $this->input->get->link == $image->url ? " checked='checked'" : '';
			$out .= "\n\t<p id='wrap_link_original'>" . 
				"\n\t\t<label>" . 
				"\n\t\t\t<input type='checkbox'$checked name='selected_image_link' id='selected_image_link' value='{$image->url}' /> " . $this->_('Link to Larger Version?') . 
				"\n\t\t\t<span class='detail'>({$originalWidth}x{$originalHeight})</span> " . 
				"\n\t\t</label>" . 
				"\n\t</p>";
		}


		$out .= "\n\t<input type='hidden' name='page_id' id='page_id' value='{$this->page->id}' />";	
		$out .=	"\n</form>";

		$attrStr = '';
		foreach($attrs as $key => $value) if($value) $attrStr .= "$key='" . trim($value) . "' ";
		$nosize = $this->noSizeAttrs ? 1 : '';

		$out .= "\n\t<div id='selected_image_container'>" . 
			"\n\t\t<img id='selected_image' $attrStr alt='' data-nosize='$nosize' data-idname='{$image->page->id},{$image->basename}' src='{$image->url}' />" . 
			"\n\t</div>";

		return $out; 
		
	}

	public function ___executeResize() {

		$width = (int) $this->input->get->width; 
		$height = (int) $this->input->get->height; 
		$class = $this->sanitizer->name($this->input->get->class); 
		$image = $this->getPageimage();

		if($width < $image->width) {
			$resized = $image->width($width); 
			$height = $resized->height();
		} else {
			$width = $image->width; 
			$height = $image->height; 
			$resized = $image; 
		}

		// note IE8 won't properly read the width/height attrs via ajax
		// so we provide the width/height in separate fields

		$nosize = $this->noSizeAttrs ? 1 : '';

		$out =	"<p>" .  
			"<span id='selected_image_width'>$width</span>x" . 
			"<span id='selected_image_height'>$height</span><br />" . 
			"<img id='selected_image' class='$class' data-idname='{$image->page->id},{$image->basename}' data-nosize='$nosize' src='{$resized->url}' width='$width' height='$height' />" . 
			"</p>";

		return $out; 
	}

	static public function getModuleConfigInputfields(array $data) {
		$inputfields = new InputfieldWrapper();
		$data = array_merge(self::$defaultConfig, $data); 

		$f = wire('modules')->get('InputfieldCheckbox');
		$f->attr('name', 'noSizeAttrs'); 
		$f->attr('value', 1);
		if(!empty($data['noSizeAttrs'])) $f->attr('checked', 'checked');
		$f->label = __('Skip width and height attributes on image tags?', __FILE__); // noSizeAttr label
		$f->description = __('By default, this module will include width and height attributes in the <img> tag. If you are using responsive images, you might want to disable this behavior. Check the box to disable width and height attributes.', __FILE__); // noSizeAttr description
		$inputfields->add($f);

		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'alignLeftClass');
		$f->attr('value', $data['alignLeftClass']); 
		$f->label = __('Align Image Left Class'); 
		$inputfields->add($f);
		
		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'alignRightClass');
		$f->attr('value', $data['alignRightClass']); 
		$f->label = __('Align Image Right Class'); 
		$inputfields->add($f);

		$f = wire('modules')->get('InputfieldText'); 
		$f->attr('name', 'alignCenterClass');
		$f->attr('value', $data['alignCenterClass']); 
		$f->label = __('Align Image Center Class'); 
		$inputfields->add($f);

		return $inputfields;
	}

}

