<?php

/**
 * ProcessWire Page Add Process
 *
 * Provides the UI for adding a page
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageAdd extends Process {

	protected $form; 
	protected $parent; 
	protected $parent_id;
	protected $page; 
	protected $template; 
	protected $allowedTemplates = null; //cache

	public static function getModuleInfo() {
		return array(
			'title' => __('Page Add', __FILE__),          
			'summary' => __('Add a new page', __FILE__), 
			'version' => 100, 
			'permanent' => true, 
			'permission' => 'page-edit',
			);
	}

	public function init() {
		$this->page = null;
		return parent::init();
	}

	public function set($key, $value) {
		if($key == 'parent_id') $this->parent_id = (int) $value;
			else if($key == 'template' &&  $value instanceof Template) $this->template = $value;
			else return parent::set($key, $value); 	
	}

	public function ___execute() {

		Wire::setFuel('processHeadline', $this->_('Add New')); // Headline

		if(!$this->parent_id) {
			if(isset($_POST['parent_id'])) {
				$this->parent_id = (int) $_POST['parent_id']; 
			} else {
				$this->parent_id = isset($_GET['parent_id']) ? (int) $_GET['parent_id'] : 1; 
			}
		}

		if(!$this->parent_id) throw new Wire404Exception("Invalid Parent ID"); 

		$this->parent = $this->pages->get($this->parent_id); 
		if(!$this->parent) throw new Wire404Exception("Unable to load page {$this->id}"); 

		if($this->parent->template->noChildren) {
			throw new WireException("The parent template has specified that no children may be added here"); 

		} else if(!$this->parent->addable()) {
			throw new WireException("You don't have access to add pages here"); 

		} else if(count($this->parent->template->childTemplates) == 1) {
			$childTemplates = $this->parent->template->childTemplates;
			$this->template = $this->templates->get(reset($childTemplates)); 	
			if(!$this->isAllowedTemplate($this->template)) throw new WireException("You don't have access to the template required to add pages here"); 
		}

		$this->form = $this->buildForm();
		$this->form->setTrackChanges();

		if($this->input->post->submit_save) $this->processInput($this->form); 

		$this->setupBreadcrumbs();

		return $this->form->render();
	}	

	/**
	 * Returns an array of templates that are allowed to be used here
	 *
	 */
	protected function getAllowedTemplates() {

		if(is_array($this->allowedTemplates)) return $this->allowedTemplates;

		$isSuperuser = $this->fuel('user')->isSuperuser();
		$user = $this->fuel('user');
		$templates = array();

		if($this->parent->is(Page::statusUnpublished)) {
			$parentEditable = $this->parent->editable();
		} else {
			// temporarily put the parent in an unpublished status so that we can check it from 
			// the proper context: when page-publish permission exists, a page not not editable
			// if a user doesn't have page-publish permission to it, even though it may still
			// be editable if it was unpublished. 
			$this->parent->addStatus(Page::statusUnpublished); 
			$parentEditable = $this->parent->editable(); 
			$this->parent->removeStatus(Page::statusUnpublished); 
		}

		foreach($this->fuel('templates') as $t) {

			if($t->noParents) continue; 

			if($t->useRoles && !$user->hasPermission('page-create', $t)) continue;  
			if(!$t->useRoles && !$parentEditable) continue; 
			if(!$t->useRoles && !$user->hasPermission('page-create', $this->parent)) continue; 

			if(count($this->parent->template->childTemplates)) {
				if(!in_array($t->id, $this->parent->template->childTemplates)) continue; 
			} 

			if(count($t->parentTemplates)) {
				if(!in_array($this->parent->template->id, $t->parentTemplates)) continue; 
			}

			if($t->flags & Template::flagSystem) { 
				if($t->name == 'user' && $this->parent->id != $this->config->usersPageID) continue; 
				if($t->name == 'role' && $this->parent->id != $this->config->rolesPageID) continue; 
				if($t->name == 'permission' && $this->parent->id != $this->config->permissionsPageID) continue; 
			}

			$templates[$t->id] = $t;
		}

		$this->allowedTemplates = $templates;

		return $templates; 
	}

	/**
	 * Is the given template or template ID allowed here?
	 *
	 */
	protected function isAllowedTemplate($id) {
		if(is_object($id) && $id instanceof Template) $id = $id->id; 
		$id = (int) $id; 
		$templates = $this->getAllowedTemplates();
		return isset($templates[$id]); 
	}

	/**
	 * Build the form fields for adding a page
	 *
	 */
	protected function buildForm() {

		$form = $this->modules->get('InputfieldForm');

		$form->attr('id', 'ProcessPageAdd'); 
		$form->attr('action', './' . ($this->input->get->modal ? "?modal=1" : '')); 
		$form->attr('method', 'post'); 

		if(is_null($this->template) || !$this->template->noGlobal) {
			$page = new NullPage(); // for getInputfield
			foreach($this->fuel('fields') as $field) {
				if($field->flags & Field::flagGlobal && ($field->type instanceof FieldtypePageTitle || $field->type instanceof FieldtypePageTitleLanguage)) {
					if($this->template) $field = $this->template->fieldgroup->getField($field->id, true); // get in context of fieldgroup
					$form->append($field->getInputfield($page)); 
					break;
				}
			}
		}

		$field = $this->modules->get('InputfieldPageName');
		$field->parentPage = $this->parent; 
		$field->attr('name', '_pw_page_name'); 
		$field->required = true; 
		$form->append($field); 

		if(!$this->template) { 

			/*
			$field = $this->modules->get('InputfieldPageListSelect');
			$field->label = "Parent";
			$field->attr('name', 'parent_id'); 
			$field->attr('value', $this->parent_id); 
			$form->append($field); 
			*/

			$defaultTemplateId = $this->parent->template->id; 
			if($this->parent->numChildren > 0) { 
				$sibling = $this->parent->child('sort=-created, status<' . Page::statusUnpublished);
				if($sibling && $sibling->id) $defaultTemplateId = $sibling->template->id;
			}
			if(!$this->isAllowedTemplate($defaultTemplateId)) $defaultTemplateId = 0;

			$field = $this->modules->get('InputfieldSelect');
			$field->label = $this->_('Template'); // Template field label
			$field->attr('name', 'template'); 
			$field->attr('value', $defaultTemplateId); 
			$field->required = true; 
			$language = wire('languages') && wire('user')->language->id ? wire('user')->language : null;

			foreach($this->getAllowedTemplates() as $template) {
				$field->addOption($template->id, $this->getTemplateLabel($template)); 
			}

			$form->append($field); 

		} else if(!count($_POST)) {
			$this->message(sprintf($this->_("You are adding a page using the '%s' template"), $this->getTemplateLabel($this->template))); 
		}

		$field = $this->modules->get('InputfieldHidden'); 
		$field->attr('name', 'parent_id'); 
		$field->attr('value', $this->parent_id); 
		$form->append($field);

		$field = $this->modules->get('InputfieldSubmit');
		$field->attr('id+name', 'submit_save'); 
		$field->attr('value', $this->_('Save')); // Save button
		$form->append($field); 

		$allowedTemplates = $this->getAllowedTemplates();	

		if(count($allowedTemplates) == 1) {
			$t = reset($allowedTemplates);
			$form->description = $this->getTemplateLabel($t); 
		}

		return $form; 
	}

	/**
	 * Return the label for the given Template
	 *
	 */
	protected function getTemplateLabel(Template $template) {
		$label = '';
		$user = wire('user'); 
		$language = wire('languages') && $user->language->id && !$user->language->isDefault ? wire('user')->language : null;
		if($language) $label = $template->get('label' . $language->id);
		if(!$label) $label = $template->label ? $template->label : $template->name; 
		return $label;
	}

	/**
	 * Save the submitted page add form
	 *
	 */
	protected function processInput(Inputfield $form) {

		$this->page = new Page(); // must exist before processInput for language hooks
		$form->processInput($this->input->post);

		$nameField = $form->children->get('_pw_page_name'); 	
		$name = $nameField->value; 

		if(!strlen($name)) {
			$this->error($this->_("Missing required field: name")); 
			return false; 
		}

		if($this->parent->child("name=$name, include=all")->id) {
			$nameField->error($this->_("The name you selected is already in use. Please select another.")); 
			return false;
		}

		$template = $this->template; 
		if(is_null($template)) { 
			$templatesId = (int) $form->children->get('template')->value; 
			$template = $this->templates->get($templatesId); 
		}

		if(!$this->isAllowedTemplate($template)) throw new WireException("You don't have access to add pages with template '$template'"); 
	
		$this->page->template = $template;	
		$this->page->parent = $this->parent; 
		$this->page->name = $name; 
		$this->page->sort = $this->parent->numChildren; 

		$publishNow = $this->page->publishable();
		$languages = wire('languages'); 

		foreach($this->page->fields as $field) {
			$f = $form->children->get($field->name); 
			if($f) {
				if($languages && $f->useLanguages) {
					// account for language fields (most likely FieldtypePageTitleLanguage)
					$value = $this->page->get($field->name); 
					if(is_object($value)) $value->setFromInputfield($f);
				} else {
					$value = $f->attr('value'); 
				}
				$this->page->set($field->name, $value); 
			} else {
				$publishNow = false; // non-global fields means we won't publish yet
			}
		}

		// if more fields are going to be present in this page's template, then don't make this page available until the user has 
		// had the opportunity to edit those fields in ProcessPageEdit. But if they've already seen all the fields that will be here (global),
	 	// like just a title field, then go ahead and publish now. 

		if(!$publishNow) $this->page->addStatus(Page::statusUnpublished); 

		try {
			$this->pages->save($this->page); 
		} catch(Exception $e) {
			$this->error($e->getMessage()); 
			return false;
		}

		$this->session->message(sprintf($this->_('Created page %1$s using template: %2$s'), $this->parent->url . $this->page->name, $template->name)); 
		$this->session->redirect("../edit/?id={$this->page->id}" . ($this->input->get->modal ? "&modal=1" : ''));
	}

	/**
	 * Setup the UI breadcrumb trail
	 *
	 */
	public function setupBreadcrumbs() {
		if($this->fuel('page')->process != $this->className()) return;
		$breadcrumbs = new Breadcrumbs();
		$breadcrumbs->add(new Breadcrumb($this->config->urls->admin . 'page/list/', "Pages"));
		foreach($this->parent->parents()->append($this->parent) as $p) {
			$breadcrumbs->add(new Breadcrumb($this->config->urls->admin . "page/list/?open=" . $p->id, $p->get("title|name"))); 
		}
		$this->setFuel('breadcrumbs', $breadcrumbs); 
	}

	/**
	 * @return Page|null
	 *
	 */
	public function getPage() {
		return $this->page; 
	}
}

