<?php

/**
 * Comments Manager
 *
 * Manage all comments field data in chronological order. 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessCommentsManager extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Comments', 
			'summary' => 'Manage comments in your site outside of the page editor.',
			'version' => 5, 
			'author' => 'Ryan Cramer', 
			'icon' => 'comments', 
			'requires' => 'FieldtypeComments',
			'permission' => 'comments-manager', 
			'permissions' => array(
				'comments-manager' => 'Use the comments manager', 
				),
			'page' => array(
				'name' => 'comments',
				'parent' => 'setup', 
				'title' => 'Comments', 
				),
			'nav' => array(
				array(
					'url' => '?go=approved',
					'label' => __('Approved', __FILE__),
					),
				array(
					'url' => '?go=pending',
					'label' => __('Pending', __FILE__),
					), 
				array(
					'url' => '?go=spam',
					'label' => __('Spam', __FILE__),
					),
				array(
					'url' => '?go=all',
					'label' => __('All', __FILE__),
					)
				)
			); 
	}


	/**
	 * Statuses and labels that a Comment can have
	 *
	 */
	protected $statuses = array();

	/**
	 * Number of comments to show per page
	 *
	 */
	protected $limit = 10;

	/**
	 * Initialize the comments manager and define the statuses
	 *
	 */
	public function init() {
		parent::init();
		$this->statuses = array(
			Comment::statusApproved => $this->_('approved'),
			Comment::statusPending => $this->_('pending'),
			Comment::statusSpam => $this->_('spam'),
			Comment::statusDelete => $this->_('delete')
			); 
	}

	/**
	 * Ask the user to select which comments field they want to manage
 	 *
	 * Or, redirect to the comments field if there is only 1.
	 *
	 */
	public function ___execute() {
		$this->checkInstall();
		// locate all the FieldtypeComments fields
		$fields = array();
		foreach($this->fields as $field) {
			if($field->type instanceof FieldtypeComments) $fields[] = $field;
		}

		$count = count($fields);

		if(!$count) return $this->error($this->_('There are no comments fields installed')); 
		
		$go = $this->wire('sanitizer')->pageName($this->wire('input')->get('go')); 

		if($count == 1 || $go) {
			$field = reset($fields);
			$to = 'all';
			if($go && in_array($go, $this->statuses)) $to = $go;
			$this->wire('session')->redirect("./list/$field->name/$to/"); 
			return;
		}

		$out = "<h2>" . $this->_('Please select a comments field') . "</h2><ul>";
		foreach($fields as $field) {
			$out .= "<li><a href='./list/{$field->name}/pending/'>{$field->name}</a></li>";
		}
		$out .= "</ul>";

		return $out;
	}	

	/**
	 * Execute the comments list 
	 *
	 */
	public function ___executeList() {

		$name = $this->sanitizer->fieldName($this->input->urlSegment2); 
		if(!$name) return $this->error($this->_('No comments field specified in URL')); 
		$field = $this->fields->get($name); 
		if(!$field || !$field->type instanceof FieldtypeComments) return $this->error($this->_('Unrecognized field')); 
		$status = $this->input->urlSegment3;
		if(empty($status) || ($status != 'all' && !in_array($status, $this->statuses))) {
			$this->wire('session')->redirect($this->wire('page')->url . "list/$field->name/all/");
		}
		$headline = ucfirst($status); 
		$this->breadcrumb('../', $field->getLabel()); 

		$limit = (int) $this->limit; 
		$start = ($this->input->pageNum-1) * $limit; 
		$sort = '-created';
		$selector = "start=$start, limit=$limit, sort=$sort";
		$filterOut = '';
		$filterLabels = array(
			'id' => $this->_('ID'),
			'parent_id' => $this->_('Replies to'), 
			);


		if($status != 'all') {
			$selector .= ", status=" . array_search($status, $this->statuses); 
		}

		foreach(array('cite', 'email', 'ip', 'id', 'parent_id') as $key) {
			$value = $this->input->get->$key; 
			if(is_null($value)) continue; 
			if($key == 'id' || $key == 'parent_id') $value = (int) $value; 
			$this->input->whitelist($key, $this->sanitizer->text($value)); 
			$value = $this->sanitizer->selectorValue($value); 
			$selector .= ", $key=$value";
			//$this->message(ucfirst($key) . ": " . htmlentities($value, ENT_QUOTES, "UTF-8") . " (<a href='./'>" . $this->_('remove filter') . "</a>)", Notice::allowMarkup); 
			$filterLabel = isset($filterLabels[$key]) ? $filterLabels[$key] : ucfirst($key); 
			$filterOut .= $this->wire('sanitizer')->entities(", $filterLabel: $value");
		}

		$comments = $field->type->find($field, $selector); 
		if($this->input->post->processComments) $this->processComments($comments, $field); 
		if($filterOut) {
			$this->breadcrumb('./', $headline); 
			$headline = trim($filterOut, ", "); 
		}
		$this->headline($headline); 
		return $this->renderComments($comments); 
		
	}

	/**
	 * Process changes to posted comments
	 *
	 */
	protected function processComments(CommentArray $comments, Field $field) {

		$savePages = array();
		$table = $field->getTable();
		$numDeleted = 0;
		$numChanged = 0;

		foreach($comments as $comment) {

			$id = (int) $comment->id;
			$properties = array();

			$text = $this->input->post("CommentText{$comment->id}"); 
			if(!is_null($text) && $text != $comment->text) {
				$comment->text = $text; // cleans it
				$properties['text'] = $comment->text;
				$numChanged++;
			}

			if($field->useVotes) { 
				foreach(array("upvotes", "downvotes") as $name) {
					$votes = (int) $this->input->post("Comment" . ucfirst($name) . $comment->id); 
					if($votes != $comment->$name) {
						$comment->set($name, $votes); 
						$properties[$name] = $comment->$name;
						$numChanged++;
					}
				}
			}

			$_status = $this->input->post("CommentStatus{$comment->id}"); 
			$status = (int) $_status;
			if($status === Comment::statusDelete) {
				if($field->type->deleteComment($comment->getPage(), $field, $comment)) {
					$this->message(sprintf($this->_('Deleted comment #%d'), $comment->id)); 
					$numDeleted++;
				}
				continue; 
			}
			if($_status !== null && $status !== (int) $comment->status && array_key_exists($status, $this->statuses)) {
				$comment->status = $status; 
				$numChanged++;
				$properties['status'] = $comment->status;
			}

			if(count($properties)) {
				$field->type->updateComment($comment->getPage(), $field, $comment, $properties); 	
				$this->message(sprintf($this->_('Updated comment #%d'), $comment->id) . " (" . implode(', ', array_keys($properties)) . ")"); 
			}

		}

		if($numDeleted || $numChanged) {
			$pageNum = $this->input->pageNum > 1 ? 'page' . $this->input->pageNum : '';
			$this->session->redirect('./' . $pageNum . $this->getQueryString());
		}
	}

	/**
	 * Render the markup for a single comment
	 *
	 */
	protected function renderComment(Comment $comment) {

		$type = '';
		$numChildren = 0;
		if($comment->getField()->depth > 0) { 
			$children = $comment->children();
			$numChildren = count($children);
		}

		foreach($this->statuses as $status => $label) {
			$checked = $comment->status == $status ? " checked='checked'" : '';
			if($status == Comment::statusDelete && $numChildren) continue; 
			$type .= 
				"<label class='CommentStatus'>" . 
				"<input type='radio' name='CommentStatus{$comment->id}' value='$status'$checked />&nbsp;" . 
				"<small>$label</small>" . 
				"</label> &nbsp; ";
		}

		$cite = htmlentities($comment->cite, ENT_QUOTES, "UTF-8"); 
		$email = htmlentities($comment->email, ENT_QUOTES, "UTF-8"); 
		$website = htmlentities($comment->website, ENT_QUOTES, "UTF-8"); 
		$ip = htmlentities($comment->ip, ENT_QUOTES, "UTF-8"); 
		$date = wireDate('%c', $comment->created) . " ";
		$date .= "<span class='detail'>" . wireDate('relative', $comment->created) . "</span>";

		//$text = $comment->getFormatted('text'); 
		$text = htmlentities($comment->get('text'), ENT_QUOTES, "UTF-8");
		$text = str_replace('\r', ' ', $text); 
		$text = preg_replace('/\r?(\n)/', '\r', $text); 
		$text = str_replace('\r\r', "<br />\n<br />\n", $text);
		$text = str_replace('\r', "<br />\n", $text);

		$page = $comment->getPage();

		if($page->editable()) {
			$text = "<div class='CommentTextEditable' id='CommentText{$comment->id}'>" . 
				"<p>$text <a class='CommentTextEdit' href='#'><i class='fa fa-edit'></i>&nbsp;" . $this->_('edit') . "</a></p>" . 
				"</div>";
		}

			
		$out = 	"<table class='CommentItemInfo CommentItemStatus{$comment->status}'>" . 
			"<tr class='CommentTitle'>" . 
				"<th>" . $this->_('Page') . "</th>" . 
				"<td>" . 
					"<a href='{$page->url}'><strong>{$page->title}</strong></a> " .
					"<a class='detail' href='{$page->url}#Comment$comment->id'>#$comment->id</a>" . 
				"</td>" . 
			"</tr>" . 
			"<tr><th>" . $this->_('Date') . "</th><td>$date</td></tr>" . 
			"<tr>" .
				"<th>" . $this->_('Cite') . "</th>" . 
				"<td>" . 
					"<a href='./?cite=" . urlencode($cite) . "'>$cite</a> " . 
					"<a class='detail' href='./?ip=" . urlencode($ip) . "'>$ip</a>" . 
				"</td>" . 
			"</tr>" . 
			"<tr><th>" . $this->_('Mail') . "</th><td><a href='./?email=" . urlencode($email) . "'>$email</a></td></tr>";

		if($website) $out .= "<tr><th>" . $this->_('Web') . "</th><td><a target='_blank' href='$website'>$website</a></td></tr>";

		$out .= "<tr><th>" . $this->_('Type') . "</th><td class='CommentStatus'>$type</td></tr>";

		if($comment->getField()->useVotes) $out .=
			"<tr>" . 
				"<th>" . $this->_('Vote') . "</th>" . 
				"<td class='CommentVotes'>" . 
					"<label class='CommentUpvotes'><input title='upvotes' type='number' name='CommentUpvotes$comment->id' value='$comment->upvotes' />&nbsp;<span>&uarr;</span></label> " . 
					"<label class='CommentDownvotes'><input title='downvotes' type='number' name='CommentDownvotes$comment->id' value='$comment->downvotes' />&nbsp;<span>&darr;</span></label> " . 
				"</td>" . 
			"</tr>";
		
		$out .= "</table>";

		$parentOut = '';
		$parent = $comment->parent();
		if($parent) {
			$parentLink = $this->wire('sanitizer')->entities($parent->cite) . " <a href='../all/?id=$parent->id'>#$parent->id</a>";
			$parentOut = "<p class='CommentReplyInfo detail'><i class='fa fa-angle-double-down'></i> " . sprintf($this->_('In reply to %s'), $parentLink) . "</p>";
		}

		$childrenOut = '';
		if($numChildren) { 
			$childrenLink = "<a href='../all/?parent_id=$comment->id'><i class='fa fa-angle-double-right'></i> " . sprintf($this->_n('%d reply', '%d replies', $numChildren), $numChildren) . "</a>";
			$childrenOut = "<p class='CommentChildrenInfo detail'>$childrenLink</p>";
		}

		$out = 	"<div class='CommentItem'>$out " . 
				"<div class='CommentContent'>" . 
					"$parentOut" . 
					"<div class='CommentText'>$text</div>" . 
					"$childrenOut" . 
				"</div>" . 
			"</div>";

		$page->of(false);

		return $out; 
	}

	protected function getQueryString() {
		$queryString = '';
		foreach($this->input->whitelist as $key => $value) {
			$queryString .= $this->wire('sanitizer')->entities($key) . "=" . $this->wire('sanitizer')->entities($value) . "&";
		}
		$queryString = trim($queryString, '&');
		if($queryString) $queryString = "?$queryString";
		return $queryString; 
	}

	/**
	 * Render the markup for a list of comments
	 *
	 */
	protected function renderComments(CommentArray $comments) {

		$out = '';
		$cnt = 0;
		$status = $this->input->urlSegment3;
		$start = $comments->getStart();
		$limit = $comments->getLimit();
		$total = $comments->getTotal();
		$pageNumPrefix = $this->config->pageNumUrlPrefix; 
		$pageNum = $this->wire('input')->pageNum; 
		$queryString = $this->getQueryString();

		foreach($comments as $comment) {
			if($status && $status != 'all' && $this->statuses[$comment->status] != $status) continue; 
			$out .= $this->renderComment($comment); 
			$cnt++;
			if($cnt >= $this->limit) break;
		}

		$pager = $this->wire('modules')->get('MarkupPagerNav'); 
		$pagerOut = $pager->render($comments, array(
			'queryString' => $queryString,
			'baseUrl' => "./"
		)); 

		$wireTabs = $this->modules->get('JqueryWireTabs'); 
		$tabs = array();
		$class = $this->input->urlSegment3 == 'all' ? 'on' : '';
		$tabs["tabStatusAll"] = "<a class='$class' href='../all/'>" . $this->_('All') . "</a>";

		foreach($this->statuses as $status => $label) {
			if($status == Comment::statusDelete) continue; 
			$class = $this->input->urlSegment3 === $label ? 'on' : '';
			$tabs["tabStatus$status"] = "<a class='$class' href='../$label/'>" . ucfirst($label) . "</a>";
		}

		$tabsOut = $wireTabs->renderTabList($tabs);
		$filters = '';
		$links = '';	
		$headline = ($start+1) . "&#8211;" . ($start + $cnt) . " " . sprintf($this->_('of %d'), $total);
		$out = $filters . $links . $out . $links; 

		if($cnt) { 
			$button = $this->modules->get('InputfieldSubmit');
			$button->attr('name', 'processComments');
			$button->attr('class', $button->attr('class') . ' head_button_clone'); 
			$button = $button->render();
		} else $button = '';

		if($this->input->pageNum > 1) $queryString = "./$pageNumPrefix$pageNum$queryString";

		if(!count($comments)) {
			$headline = $this->_('None to display');
		}

		return 	
			"$tabsOut" . 
			"$pagerOut" . 
			"<h2>$headline</h2>" . 
			"<form action='$queryString' method='post'>" . 
			"<div class='CommentItems ui-helper-clearfix'>$out</div>" . 
			"$pagerOut" . 
			"$button" . 
			"</form>"; 
	}
	
	protected function checkInstall() {
		if($this->wire('modules')->isInstalled('ProcessLatestComments')) {
			$this->warning('Please uninstall the ProcessLatestComments module (this module replaces it).');
		}
	}

	public function ___install() {
		$this->checkInstall();
		return parent::___install();
	}


}

