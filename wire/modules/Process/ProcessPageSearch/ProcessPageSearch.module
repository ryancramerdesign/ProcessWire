<?php

/**
 * ProcessWire Page Search Process
 *
 * Provides page searching within the ProcessWire admin
 *
 * For more details about how Process modules work, please see:
 * /wire/core/Process.php
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageSearch extends Process implements ConfigurableModule {

	static public function getModuleInfo() {
		return array(
			'title' => 'Page Search',
			'summary' => 'Provices a page search engine for admin use.',
			'version' => 101,
			'permanent' => true,
			'permission' => 'page-edit',
			);
	}

	protected $nativeSorts = array(
		'relevance',
		'name',
		'title',
		'id',
		'status',
		'templates_id',
		'parent_id',
		'created',
		'modified',
		'createdUser',
		'modifiedUser',
		'sort',
		'sortfield',
		);

	protected $customSorts = array();

	protected $operators = array(
		'=' => 'Equals',
		'!=' => 'Does not equal',
		'>' => 'Greater than',
		'>=' => 'Greater than or equal to',
		'<' => 'Less than',
		'<=' => 'Less than or equal to',
		'*=' => 'Contains phrase or partial word',
		'~=' => 'Contains all the words',
		);

	protected $operator = '~=';
	protected $resultLimit = 50;
	protected $fieldOptions = array();


	public function ___execute() {
		$this->processInput();
		$out = "<div id='ProcessPageSearchOptions'>";
		$out .= $this->renderFullSearchForm();
		$out .= $this->renderQuickLinks();
		$out .= "</div>";
		$out .= "\n<div id='ProcessPageSearchResults'>" . $this->search() . "\n</div><br style='clear: both;' />";
		return $out;
	}

	protected function search() {

		$out = '';
		$selector = '';

		$this->processInput();

		// search query text
		$q = $this->input->whitelist('q');
		if(strlen($q)) {
			$searchFields = $this->searchFields;
			if(is_string($searchFields)) $searchFields = explode(' ', $searchFields);

			foreach($searchFields as $fieldName) {
				$fieldName = $this->sanitizer->fieldName($fieldName);
				$selector .= "$fieldName|";
			}
			$selector = rtrim($selector, '|') . $this->operator . $q;
		}

		// determine if results are sorted by something other than relevance
		$sort = $this->input->whitelist('sort');
		if($sort && $sort != 'relevance') {
			$reverse = $this->input->whitelist('reverse') ? "-" : '';
			$selector .= ", sort=$reverse$sort";

			// if a specific template isn't requested, then locate the templates that use this field and confine the search to them
			if(!$this->input->whitelist('template') && !in_array($sort, $this->nativeSorts)) {
				$templates = array();
				foreach($this->templates as $template) {
					if($template->fieldgroup->has($sort)) $templates[] = $template->name;
				}
				if(count($templates)) $selector .= ", template=" . implode("|", $templates);
			}
		}

		// determine if search limited to a specific template
		if($this->input->whitelist('template')) $selector .= ", template=" . $this->input->whitelist('template');

		if(!$selector) {
			$this->error("No search specified");
			return '';
		}

		$selector = trim($selector, ", ");

		// highlight the selector that was used
		$displaySelector = $selector;

		// limit results for pagination
		$selector .= ", limit={$this->resultLimit}";

		// include hidden pages
		$selector .= ", status<" . Page::statusUnpublished;

		// execute the search
		$matches = $this->pages->find($selector);

		$this->message("Found " . $matches->getTotal() . " pages using selector: $displaySelector");

		// determine what fields will be displayed
		$display = $this->input->whitelist('display');
		$display = str_replace(',', ' ', $display);
		$display = explode(' ', $display); // convert to array
		if(!count($display)) $display = array('path');

		$out .= $this->renderMatchesTable($matches, $display);

		return $out;
	}

	protected function processInput() {

		$this->fieldOptions = array();
		foreach($this->fields as $field) {
			if($field->type instanceof FieldtypeFieldsetOpen) continue;
			if($field->type instanceof FieldtypePassword) continue;
			$this->fieldOptions[] = $field->name;
		}

		sort($this->fieldOptions);

		// search fields
		if($this->input->get->field) {
			$field = str_replace(',', ' ', $this->input->get->field);
			$fieldArray = explode(' ', $field);
			$field = '';
			foreach($fieldArray as $f) {
				$f = $this->sanitizer->fieldName($f);
				if(!in_array($f, $this->fieldOptions) && !in_array($f, $this->nativeSorts)) continue;
				$field .= $f . " ";
			}
			$field = rtrim($field, " ");
			if($field) {
				$this->searchFields = $field;
				$this->input->whitelist('field', $field);
			}
		} else {
			$this->input->whitelist('field', $this->searchFields);
		}

		// operator, search type
		$this->operator = '~=';
		if($this->input->get->operator && array_key_exists($this->input->get->operator, $this->operators)) {
			$this->operator = substr($this->input->get->operator, 0, 3);
			$this->input->whitelist('operator', $this->operator);
		}

		// search query
		$q = $this->sanitizer->selectorValue(substr($this->input->get->q, 0, 128));
		$this->input->whitelist('q', $q);

		// sort
		$this->input->whitelist('sort', 'relevance');
		if($this->input->get->sort) {
			$sort = $this->sanitizer->fieldName($this->input->get->sort);
			if($sort && (in_array($sort, $this->nativeSorts) || in_array($sort, $this->fieldOptions))) $this->input->whitelist('sort', $sort);
			if($this->input->get->reverse) $this->input->whitelist('reverse', 1);
		}

		// display fields
		if(!$this->displayField) $this->displayField = 'title,path';
		$this->input->whitelist('display', $this->displayField);
		if($this->input->get->display) {
			$display = str_replace(',', ' ', $this->input->get->display);
			$displayArray = explode(' ', $display);
			$display = '';
			foreach($displayArray as $d) {
				if(!strlen($d)) continue;
				$d = $this->sanitizer->fieldName($d);
				if(!in_array($d, $this->nativeSorts) && !in_array($d, array('path', 'url', 'httpUrl', 'parent', 'template'))) {
					if(!in_array($d, $this->fieldOptions)) continue;
				}
				$display .= $d . " ";
			}
			$display = trim($display);
			$this->input->whitelist('display', $display);
		}

		// template
		if($this->input->get->template) {
			$template = $this->sanitizer->name($this->input->get->template);
			if(!$this->templates->get($template)) $template = '';
			if($template) $this->input->whitelist('template', $template);
		}

	}

	protected function renderFullSearchForm() {

		$out  = "\n\t<p id='wrap_search_query'>" .
			"\n\t<label for='search_query'>Search for:</label>" .
			"\n\t<input id='search_query' type='text' name='q' value='" . htmlentities($this->input->whitelist('q'), ENT_QUOTES, "UTF-8") . "' />" .
			"\n\t</p>";



		$out2 =	"\n\t<p id='wrap_search_operator'>" .
			"\n\t<label for='search_operator'>Type of search:</label>" .
			"\n\t<select id='search_operator' name='operator'>" .
			"\n\t\t<option></option>";

		foreach($this->operators as $operator => $desc) {
			$attrs = $this->operator === $operator ? " selected='selected'" : '';
			$out2 .= "\n\t\t<option$attrs value='$operator'>$desc</option>";
		}

		$out2 .= "\n\t</select>" .
			"\n\t</p>";

		$out .= "\n\t<p id='wrap_search_template'>" .
			"\n\t<label for='search_template'>Limit to template: </label>" .
			"\n\t<select id='search_template' name='template'>" .
			"\n\t\t<option></option>";

		$templateName = $this->input->whitelist('template');
		foreach($this->templates as $template) {
			$attrs = $template->name === $templateName ? " selected='selected'" : '';
			$out .= "\n\t<option$attrs>{$template->name}</option>";
		}

		$out .= "\n\t</select>" .
			"\n\t</p>";

		$out2 .= "\n\t<p id='wrap_search_field'>" .
			"\n\t<label for='search_field'>Search in field(s):</label>" .
			"\n\t<input type='text' name='field' value='" . htmlentities($this->searchFields, ENT_QUOTES) . "' />" .
			"\n\t</p>";

		$out2 .= "\n\t<p id='wrap_search_display'>" .
			"\n\t<label for='search_display'>Display field(s):</label>" .
			"\n\t<input type='text' name='display' value='" . htmlentities($this->input->whitelist('display'), ENT_QUOTES) . "' />" .
			"\n\t</p>";

		$out2 .= "\n\t<p id='wrap_search_sort'>" .
			"\n\t<label for='search_sort'>Sort by: </label>" .
			"\n\t<select id='search_sort' name='sort'>";

		$sorts = $this->nativeSorts + $this->fieldOptions;

		$sort = $this->input->whitelist('sort');
		foreach($sorts as $s) {
			if(strpos($s, ' ')) continue; // skip over multi fields
			$attrs = '';
			if($s === $sort) $attrs = " selected='selected'";
			$out2 .= "\n\t\t<option$attrs>$s</option>";
		}

		$out2 .= "\n\t</select>" .
			"\n\t</p>";

		if($sort != 'relevance') {
			$out2 .= "\n\t<p id='wrap_search_options'>" .
				"\n\t<label><input type='checkbox' name='reverse' value='1' " . ($this->input->whitelist('reverse') ? "checked='checked' " : '') . "/> Reverse sort?</label>" .
				"\n\t</p>";
		}

		$submit = $this->modules->get("InputfieldSubmit");
		$submit->attr('name', 'submit');
		$submit->attr('value', 'Search');
		$out .= "<p>" . $submit->render() . "</p>";

		$form = $this->modules->get("InputfieldForm");
		$form->attr('id', 'ProcessPageSearchOptionsForm');
		$form->method = 'get';
		$form->action = './';

		$field = $this->modules->get("InputfieldMarkup");
		$field->label = "Search Options";
		$field->value = $out;

		$form->add($field);

		$field = $this->modules->get("InputfieldMarkup");
		$field->collapsed = true;
		$field->label = "Advanced";
		$field->value = $out2;

		$form->add($field);

		return $form->render();

	}

	protected function renderQuickLinks() {
		$header = array('Quick links');
		$table = $this->modules->get("MarkupAdminDataTable");
		$table->headerRow($header);
		$table->setEncodeEntities(false);

		$row = array();
		$row[] = "<a href='?q=&submit=Search&display=title+path+created&sort=created&reverse=1'>All by creation date</a>";
		$table->row($row);

		$row = array();
		$row[] = "<a href='?q=&submit=Search&display=title+path+created&sort=modified&reverse=1'>All by latest edit date</a>";
		$table->row($row);

		$row = array();
		$row[] = "<a href='?q=&template=user&submit=Search&operator=~%3D&display=name+email+created&sort=created&reverse=1'>Users by creation date</a>";
		$table->row($row);
		$out = $table->render();

		$header = array('New pages by template');
		$table = $this->modules->get("MarkupAdminDataTable");
		$table->headerRow($header);
		$table->setEncodeEntities(false);


		foreach($this->templates as $template) {
			// Quick links only for content with more than one page
			if ($template->getNumPages() < 2) continue;

			// Users get own quick link earlier, others are rather irrelevant
			if ($template->name == 'admin' || $template->name == 'permission' || $template->name == 'role' || $template->name == 'user') continue;

			$row = array();
			$row[] = "<a href='?q=&template={$template->name}&submit=Search&operator=~%3D&display=title+path+created&sort=created&reverse=1'>{$template->name}</a>";
			$table->row($row);
		}
		$out .= $table->render();
		return $out;
	}

	protected function renderMatchesTable(PageArray $matches, array $display = array('path'), $id = 'ProcessPageSearchResultsList') {

		$out = '';

		if(!count($matches)) return $out;
		$table = $this->modules->get("MarkupAdminDataTable");
		$table->setEncodeEntities(false);
		$header = $display;
		$header[] = "";
		$table->headerRow($header);

		foreach($matches as $match) {
			$match->setOutputFormatting(true);
			$editUrl = "{$this->config->urls->admin}page/edit/?id={$match->id}";
			$viewUrl = $match->url();
			$row = array();
			foreach($display as $name) {
				$value = $match->get($name);
				if(is_object($value)) {
					if($value instanceof Page) $value = $value->name;
				}
				$value = strip_tags($value);
				if($name == 'created' || $name == 'modified') $value = date(DATE_ISO8601, $value);
				$row[] = "<a href='$viewUrl'>$value</a>";
			}
			$row[] = $match->editable() ? "<a class='action' href='$editUrl'>edit</a>" : '&nbsp;';
			$table->row($row);

		}

		$pager = $matches->getTotal() > count($matches) ? $matches->renderPager() : '';

		$out = $pager . $table->render() . $pager;

		return $out;
	}

	public function renderSearchForm() {

		$q = substr($this->input->get->q, 0, 128);
		$q = htmlentities($q, ENT_QUOTES, "UTF-8");

		$out = 	"\n<form id='ProcessPageSearchForm' action='{$this->config->urls->admin}page/search/' method='get'>" .
			"\n\t<input type='text' id='ProcessPageSearchQuery' name='q' value='$q' />" .
			"\n\t<input type='submit' id='ProcessPageSearchSubmit' name='search' value='Search' />" .
			"\n\t<span id='ProcessPageSearchStatus'></span>" .
			"\n</form>";

		return $out;

	}

	static public function getModuleConfigInputfields(array $data) {

		$inputfields = new InputfieldWrapper();

		$inputfield = Wire::getFuel('modules')->get("InputfieldText");
		$inputfield->attr('name', 'searchFields');
		if(!isset($data['searchFields'])) $data['searchFields'] = 'title body';
		if(is_array($data['searchFields'])) $data['searchFields'] = implode(' ', $data['searchFields']);
		$inputfield->attr('value', $data['searchFields']);
		$inputfield->label = "Default fields to search";
		$inputfield->description = "Enter the names for one or more text-based fields that you want to search, separating each by a space. ";
		$inputfields->append($inputfield);

		$inputfield = Wire::getFuel('modules')->get("InputfieldText");
		$inputfield->attr('name', 'displayField');
		$inputfield->attr('value', isset($data['displayField']) ? $data['displayField'] : 'name');
		$inputfield->label = "Default field name(s) to display in search results";
		$inputfield->description = "If specifying more than one field, separate each with a space.";
		$inputfields->append($inputfield);

		return $inputfields;
	}


}
