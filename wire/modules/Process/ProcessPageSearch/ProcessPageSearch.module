<?php

/**
 * ProcessWire Page Search Process
 *
 * Provides page searching within the ProcessWire admin
 *
 * For more details about how Process modules work, please see:
 * /wire/core/Process.php
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageSearch extends Process implements ConfigurableModule {

	static public function getModuleInfo() {
		return array(
			'title' => 'Page Search',
			'summary' => 'Provices a page search engine for admin use.',
			'version' => 101,
			'permanent' => true,
			'permission' => 'page-edit',
			);
	}

	const defaultOperator = '~=';

	protected $nativeSorts = array(
		'relevance',
		'name',
		'title',
		'id',
		'status',
		'templates_id',
		'parent_id',
		'created',
		'modified',
		'modified_users_id',
		'created_users_id',
		'createdUser',
		'modifiedUser',
		'sort',
		'sortfield',
		);

	protected $fieldOptions = array();
	protected $customSorts = array();
	protected $operators = array();
	protected $resultLimit = 50;
	protected $maxLimit = 250;

	public function init() {

		foreach($this->fields as $field) {
			if($field->type instanceof FieldtypeFieldsetOpen) continue;
			if($field->type instanceof FieldtypePassword) continue;
			$this->fieldOptions[] = $field->name;
		}

		sort($this->fieldOptions);

		parent::init();
	}

	static public function getOperators() {
		$f = __FILE__; 
		return array(
			'=' => 	__('Equals', $f),
			'!=' =>	__('Does not equal', $f),
			'>' => 	__('Greater than', $f),
			'>=' =>	__('Greater than or equal to', $f),
			'<' => 	__('Less than', $f),
			'<=' =>	__('Less than or equal to', $f),
			'*=' =>	__('Contains phrase or partial word', $f),
			'%=' =>	__('Contains phrase/word using LIKE', $f),
			'~=' =>	__('Contains all the words', $f),
			);
	}

	/**
	 * Setup items needed for full execution, as opposed to the regular search input that appears on all pages
	 * 
	 */
	protected function fullSetup() {
		$this->setFuel('processHeadline', $this->_x('Search', 'headline')); // Headline for search page
		$this->operators = self::getOperators();
	}


	/**
	 * Perform an interactive search and provide a search form (default)
	 *
	 */
	public function ___execute() {
		$this->fullSetup();
		$this->processInput();
		list($selector, $displaySelector) = $this->buildSelector();
		$matches = $this->pages->find($selector);
		return $this->render($matches, $displaySelector);
	}

	/**
	 * Perform a non-interactive search (based on URL GET vars)
	 *
	 * This is the preferred input method for links and ajax queries.
	 *
	 * Example /search/for?template=basic-page&body*=example
	 *
	 */
	public function ___executeFor() {

		$this->fullSetup();
		$selector = '';
		$displaySelector = '';
		$limit = $this->resultLimit;
		$start = 0;
		$status = 0;

		foreach($this->input->get as $name => $value) {

			// operator has no '=', so we'll get the value from the name
			// so that you can do something like: bedrooms>5 rather than bedrooms>=5
			if(!strlen($value) && preg_match('/([^<>]+)\s*([<>])\s*([^<>]+)/', $name, $matches)) {

				$name = $matches[1];
				$operator = $matches[2];
				$value = $matches[3]; 

			} else {

				$operator = substr($name, -1) . '=';

				if(isset($this->operators[$operator])) {
					$name = substr($name, 0, -1); 
				} else {
					$operator = '=';
				}
			}

			if(strpos($name, ',')) $name = $this->sanitizer->names($name, ',', array('_')); 
				else $name = $this->sanitizer->fieldName($name); 

			if(!$name) continue; 

			if($name == 'limit') { 
				$limit = (int) $value; 
				$this->input->whitelist('limit', $value);
				continue; 
			}

			if($name == 'start') { 
				$start = (int) $value;
				$this->input->whitelist('start', $value); 
				continue; 
			}

			if($name == 'include' && $value != 'hidden' && !$this->user->isSuperuser()) continue; 
			if($name == 'check_access' && !$this->user->isSuperuser()) continue; 
			if($name == 'status') {
				if(!$this->user->isSuperuser()) continue; 
				$status = (int) $value;
			}

			if(strpos($name, ',')) $name = str_replace(',', '|', $name); 

			if(!$this->isSelectableFieldName($name)) continue; 

			if(strpos($value, '|')) {
				$values = explode('|', $value); 
				foreach($values as $k => $v) $values[$k] = $this->sanitizer->selectorValue($v);
				$value = implode('|', $values); 
			} else {
				$value = $this->sanitizer->selectorValue($value); 
			}

			$this->input->whitelist($name . rtrim($operator, '='), trim($value, '"\'')); 	

			$selector .= "$name$operator$value, ";
		}

		if($start) $selector .= "start=$start, ";
		$selector .= "limit=$limit, ";

		$selector = rtrim($selector, ", "); 
		$displaySelector = $selector; 

		if($this->user->isSuperuser() && !$status && !preg_match('/\binclude=/', $selector)) {
			$selector .= ", include=all, status<" . Page::statusUnpublished; 
		}

		return $this->render($this->pages->find($selector), $displaySelector); 
	}

	/**
	 * Render the search results
	 *
	 */
	protected function render(PageArray $matches, $displaySelector) {

		$out = '';
		if($displaySelector) $this->message(sprintf($this->_n('Found %1$d page using selector: %2$s', 'Found %1$d pages using selector: %2$s', $matches->getTotal()), $matches->getTotal(), $displaySelector));

		// determine what fields will be displayed
		$display = $this->input->get('display');
		if(!strlen($display)) $display = $this->input->get('get'); // as required by ProcessPageSearch API 
		if(!strlen($display)) $display = $this->displayField; 
		if(!strlen($display)) $display = 'title path';
		$display = str_replace(',', ' ', $display);
		$display = explode(' ', $display); // convert to array

		foreach($display as $key => $name) {
			$name = $this->sanitizer->fieldName($name);
			$display[$key] = $name; 
			if($this->isSelectableFieldName($name)) continue; 
			if(in_array($name, array('url', 'path', 'httpUrl'))) continue; 
			unset($display[$key]); 
		}
		$this->input->whitelist('display', implode(',', $display)); 

		if($this->config->ajax) {
			// ajax json output
			$out = $this->renderMatchesAjax($matches, $display, $displaySelector); 

		} else {
			// html output
			$class = '';
			if((int) $this->input->get->show_options !== 0 && $this->input->urlSegment1 != 'find') {
				$out = "\n<div id='ProcessPageSearchOptions'>" . $this->renderFullSearchForm() . "</div>";
				$class = 'show_options';
			} 

			$out .= "\n<div id='ProcessPageSearchResults' class='$class'>" . $this->renderMatchesTable($matches, $display) . "\n</div>";
		}

		return $out;
	}

	/**
	 * Build a selector based upon interactive choices from the search form 
	 *
	 */
	protected function buildSelector() {
		$selector = '';

		// search query text
		$q = $this->input->whitelist('q');
		if(strlen($q)) {
			$searchFields = $this->searchFields;
			if(is_string($searchFields)) $searchFields = explode(' ', $searchFields);

			foreach($searchFields as $fieldName) {
				$fieldName = $this->sanitizer->fieldName($fieldName);
				$selector .= "$fieldName|";
			}
			$selector = rtrim($selector, '|') . $this->operator . $q;
		}

		// determine if results are sorted by something other than relevance
		$sort = $this->input->whitelist('sort');
		if($sort && $sort != 'relevance') {
			$reverse = $this->input->whitelist('reverse') ? "-" : '';
			$selector .= ", sort=$reverse$sort";

			// if a specific template isn't requested, then locate the templates that use this field and confine the search to them
			if(!$this->input->whitelist('template') && !in_array($sort, $this->nativeSorts)) {
				$templates = array();
				foreach($this->templates as $template) {
					if($template->fieldgroup->has($sort)) $templates[] = $template->name;
				}
				if(count($templates)) $selector .= ", template=" . implode("|", $templates);
			}
		}

		// determine if search limited to a specific template
		if($this->input->whitelist('template')) $selector .= ", template=" . $this->input->whitelist('template');

		if(!$selector) {
			$this->error($this->_("No search specified"));
			return '';
		}

		$selector = trim($selector, ", ");

		// highlight the selector that was used
		$displaySelector = $selector;

		// limit results for pagination
		$selector .= ", limit={$this->resultLimit}";

		// exclude admin repeater pages unless the admin template is chosen
		if(!$this->input->whitelist('template')) {
			$repeaters = wire('pages')->get(wire('config')->adminRootPageID)->child('name=repeaters, include=all');
			if($repeaters->id) $selector .= ", has_parent!={$repeaters->id}";
		}

		// include hidden pages
		if($this->user->isSuperuser()) $selector .= ", include=all";
			else $selector .= ", status<" . Page::statusUnpublished;

		return array($selector, $displaySelector); 
	}

	/**
	 * Process input from the search form
	 *
	 */
	protected function processInput() {

		// search fields
		if($this->input->get->field) {
			$field = str_replace(',', ' ', $this->input->get->field);
			$fieldArray = explode(' ', $field);
			$field = '';
			foreach($fieldArray as $f) {
				$f = $this->sanitizer->fieldName($f);
				if(!in_array($f, $this->fieldOptions) && !in_array($f, $this->nativeSorts)) continue;
				$field .= $f . " ";
			}
			$field = rtrim($field, " ");
			if($field) {
				$this->searchFields = $field;
				$this->input->whitelist('field', $field);
			}
		} else {
			$this->input->whitelist('field', $this->searchFields);
		}

		// operator, search type
		if(empty($this->operator)) $this->operator = self::defaultOperator; 
		$operator = $this->input->get->operator; 
		if(!is_null($operator)) {
			if(array_key_exists($operator, $this->operators)) {
				$this->operator = substr($this->input->get->operator, 0, 3);
			} else if(ctype_digit("$operator")) { 
				$operators = array_keys($this->operators); 
				if(isset($operators[$operator])) $this->operator = $operators[$operator]; 
			}
			$this->input->whitelist('operator', $this->operator);
		}

		// search query
		$q = $this->sanitizer->selectorValue(substr($this->input->get->q, 0, 128));
		$this->input->whitelist('q', $q);

		// sort
		$this->input->whitelist('sort', 'relevance');
		if($this->input->get->sort) {
			$sort = $this->sanitizer->fieldName($this->input->get->sort);
			if($sort && (in_array($sort, $this->nativeSorts) || in_array($sort, $this->fieldOptions))) $this->input->whitelist('sort', $sort);
			if($this->input->get->reverse) $this->input->whitelist('reverse', 1);
		}

		// template
		if($this->input->get->template) {
			$template = $this->sanitizer->name($this->input->get->template);
			if(!$this->templates->get($template)) $template = '';
			if($template) $this->input->whitelist('template', $template);
		}

	}


	/**
	 * Is the given field name selectable?
	 *
	 */
	protected function isSelectableFieldName($name, $level = 0) {

		$is = false;

		if(!$level && strpos($name, '|')) {
			$names = explode('|', $name); 
			$cnt = 0;
			foreach($names as $n) if(!$this->isSelectableFieldName($n, $level+1)) $cnt++;
			return $cnt == 0; 
		}

		if(in_array($name, $this->nativeSorts)) $is = true; 
 			else if(in_array($name, array('parent', 'template', 'has_parent'))) $is = true; 
			else if(!$level && in_array($name, array('include', 'status', 'check_access'))) $is = true; 
			else if(in_array($name, $this->fieldOptions)) $is = true; 


		if($name == 'pass' || $name == 'config') $is = false;
		return $is; 
	}

	protected function renderFullSearchForm() {

		// Search options

		$out  = "\n\t<p id='wrap_search_query'>";

		$out .= "\n\t<p id='wrap_search_field'>" .
			"\n\t<label for='search_field'>" . $this->_('Search in field(s):') . "</label>" .
			"\n\t<input type='text' name='field' value='" . htmlentities($this->searchFields, ENT_QUOTES) . "' />" .
			"\n\t</p>";

		$out .=	"\n\t<p id='wrap_search_operator'>" .
			"\n\t<label for='search_operator'>" . $this->_('Type of search:') . "</label>" .
			"\n\t<select id='search_operator' name='operator'>";

		$n = 0;
		foreach($this->operators as $operator => $desc) {
			$attrs = $this->operator === $operator ? " selected='selected'" : '';
			$out .= "\n\t\t<option$attrs value='$n'>$desc (a" . htmlentities($operator) . "b)</option>";
			$n++;
		}
		$out .= "\n\t</select>" .
			"\n\t</p>";

		$out .= "\n\t<label class='ui-priority-primary' for='search_query'>" . $this->_('Search for:') . "</label>" .
			"\n\t<input id='search_query' type='text' name='q' value='" . htmlentities($this->input->whitelist('q'), ENT_QUOTES, "UTF-8") . "' />" .
			"\n\t<input type='hidden' name='show_options' value='1' />" . 
			"\n\t</p>";


		// Advanced

		$advCollapsed = true; 

		$out2 = "\n\t<p id='wrap_search_template'>" .
			"\n\t<label for='search_template'>" . $this->_('Limit to template:') . "</label>" .
			"\n\t<select id='search_template' name='template'>" .
			"\n\t\t<option></option>";

		$templateName = $this->input->whitelist('template');
		if($templateName) $advCollapsed = false;
		foreach($this->templates as $template) {
			$attrs = $template->name === $templateName ? " selected='selected'" : '';
			$out2 .= "\n\t<option$attrs>{$template->name}</option>";
		}

		$out2 .= "\n\t</select>" .
			"\n\t</p>";


		$out2.= "\n\t<p id='wrap_search_sort'>" .
			"\n\t<label for='search_sort'>" . $this->_('Sort by:') . "</label>" .
			"\n\t<select id='search_sort' name='sort'>";

		$sorts = $this->nativeSorts + $this->fieldOptions;

		$sort = $this->input->whitelist('sort');
		if($sort && $sort != 'relevance') $advCollapsed = false;
		foreach($sorts as $s) {
			if(strpos($s, ' ')) continue; // skip over multi fields
			$attrs = '';
			if($s === $sort) $attrs = " selected='selected'";
			$out2 .= "\n\t\t<option$attrs>$s</option>";
		}

		$out2 .= "\n\t</select>" .
			"\n\t</p>";

		if($sort != 'relevance') {
			$reverse = $this->input->whitelist('reverse'); 
			$out2 .= "\n\t<p id='wrap_search_options'>" .
				"\n\t<label><input type='checkbox' name='reverse' value='1' " . ($reverse ? "checked='checked' " : '') . "/> " . $this->_('Reverse sort?') . "</label>" .
				"\n\t</p>";
			if($reverse) $advCollapsed = false;
		}

		$display = $this->input->whitelist('display'); 
		$out2.= "\n\t<p id='wrap_search_display'>" .
			"\n\t<label for='search_display'>" . $this->_('Display field(s):') . "</label>" .
			"\n\t<input type='text' name='display' value='" . htmlentities($display, ENT_QUOTES) . "' />" .
			"\n\t</p>";
		if($display && $display != 'title,path') $advCollapsed = false;


		$submit = $this->modules->get("InputfieldSubmit");
		$submit->attr('name', 'submit');
		$submit->attr('value', $this->_x('Search', 'submit')); // Search submit button for advanced search
		$out .= "<p>" . $submit->render() . "</p>";

		$form = $this->modules->get("InputfieldForm");
		$form->attr('id', 'ProcessPageSearchOptionsForm');
		$form->method = 'get';
		$form->action = './';

		$field = $this->modules->get("InputfieldMarkup");
		$field->label = $this->_("Search Options");
		$field->value = $out;

		$form->add($field);

		$field = $this->modules->get("InputfieldMarkup");
		if($advCollapsed) $field->collapsed = Inputfield::collapsedYes; 
		$field->label = $this->_("Advanced");
		$field->value = $out2;

		$form->add($field);

		/* Remove temporarily
		$field = $this->modules->get("InputfieldMarkup"); 
		$field->id = 'ProcessPageSearchShortcuts'; 
		$field->collapsed = true; 
		$field->label = $this->_("Shortcuts");
		$field->value = $this->renderShortcuts();
		*/

		$form->add($field); 

		return $form->render();

	}

	protected function renderShortcuts() {

		$out = '';
		$links = array(
			'Quick Links',
			"All by creation date" => '?q=&submit=Search&display=title+path+created&sort=created&reverse=1' ,
			"All by latest edit date" => '?q=&submit=Search&display=title+path+created&sort=modified&reverse=1',
			"Users by creation date" => '?q=&template=user&submit=Search&operator=~%3D&display=name+email+created&sort=created&reverse=1',
			'New pages by template',
			);

		foreach($this->templates as $template) {
			// Quick links only for content with more than one page
			// if($template->getNumPages() < 2) continue;

			// Users get own quick link earlier, others are rather irrelevant
			if($template->flags & Template::flagSystem) continue; 

			$links[$template->name] = "?q=&template={$template->name}&submit=Search&operator=~%3D&display=title+path+created&sort=created&reverse=1";
		}

		foreach($links as $label => $value) {
			if(is_int($label)) {
				$out .= "<h4>$value</h4>";
			} else {
				$value .= "&show_options=1";
				$value = htmlspecialchars($value); 
				$out .= "<a href='$value'>$label</a>";
			}
		}

		return $out;
	}

	protected function renderMatchesTable(PageArray $matches, array $display, $id = 'ProcessPageSearchResultsList') {

		if(!count($display)) $display = array('path'); 
		$out = '';

		if(!count($matches)) return $out;
		$table = $this->modules->get("MarkupAdminDataTable");
		$table->setSortable(false); 
		$table->setEncodeEntities(false);
		$header = $display;
		$header[] = "";
		$table->headerRow($header);

		foreach($matches as $match) {
			$match->setOutputFormatting(true);
			$editUrl = "{$this->config->urls->admin}page/edit/?id={$match->id}";
			$viewUrl = $match->url();
			$row = array();
			foreach($display as $name) {
				$value = $match->get($name);
				if(is_object($value)) {
					if($value instanceof Page) $value = $value->name;
				}
				$value = strip_tags($value);
				if($name == 'created' || $name == 'modified') $value = date(DATE_ISO8601, $value);
				$row[] = "<a href='$viewUrl'>$value</a>";
			}
			$row[] = $match->editable() ? "<a class='action' href='$editUrl'>" . $this->_('edit') . "</a>" : '&nbsp;';
			$table->row($row);

		}

		$pager = $matches->getTotal() > count($matches) ? $matches->renderPager() : '';

		$out = $pager . $table->render() . $pager;

		return $out;
	}

	/**
	 * Render the provided matches as a JSON string for AJAX use
	 *
	 */
	protected function renderMatchesAjax(PageArray $matches, array $display, $selector) {

		$a = array(
			'selector' => $selector, 
			'total' => $matches->getTotal(),
			'limit' => $matches->getLimit(),
			'start' => $matches->getStart(),
			'matches' => array(),
			);

		foreach($matches as $page) {

			$p = array(
				'id' => $page->id, 
				'parent_id' => $page->parent_id, 
				'template' => $page->template->name, 
				'path' => $page->path, 
				'name' => $page->name, 
				);

			foreach($display as $key) {
				$value = $page->get($key);
				if(is_object($value)) $value = $this->setupObjectMatch($value); 
				if(is_array($value)) $value = $this->setupArrayMatch($value);
				$p[$key] = $value;
			}

			$a['matches'][] = $p;
		}

		return json_encode($a); 	
	}

	/**
	 * Convert object to an array where possible, otherwise convert to a string
	 *
	 * For use by renderMatchesAjax
	 *
	 */
	protected function setupObjectMatch($o) {
		if($o instanceof Page) {
			return array(
				'id' => $o->id,
				'parent_id' => $o->parent_id,
				'template' => $o->template->name,
				'name' => $o->name,
				'path' => $o->path,
				'title' => $o->title
			); 
		}
		if($o instanceof WireData || $o instanceof WireArray) return $o->getArray();
		return (string) $o;
	}

	/**
	 * Filter an array converting any indexes containing objects to arrays or strings
	 *
	 * For use by renderMatchesAjax
	 *
	 */
	protected function setupArrayMatch(array $a) {
		foreach($a as $key => $value) {
			if(is_object($value)) $a[$key] = $this->setupObjectMatch($value);
				else if(is_array($value)) $a[$key] = $this->setupArrayMatch($value); 
		}
		return $a; 
	}

	public function renderSearchForm() {

		$q = substr($this->input->get->q, 0, 128);
		$q = htmlentities($q, ENT_QUOTES, "UTF-8");

		$out = 	"\n<form id='ProcessPageSearchForm' action='{$this->config->urls->admin}page/search/' method='get'>" .
			"\n\t<input type='text' id='ProcessPageSearchQuery' name='q' value='$q' />" .
			"\n\t<input type='submit' id='ProcessPageSearchSubmit' name='search' value='" . $this->_x('Search', 'input') . "' />" . // Text that appears as the placeholder text in the top search submit input
			"\n\t<input type='hidden' name='show_options' value='1' />" . 
			"\n\t<span id='ProcessPageSearchStatus'></span>" .
			"\n</form>";

		return $out;

	}

	static public function getModuleConfigInputfields(array $data) {

		$inputfields = new InputfieldWrapper();

		$inputfield = Wire::getFuel('modules')->get("InputfieldText");
		$inputfield->attr('name', 'searchFields');
		if(!isset($data['searchFields'])) $data['searchFields'] = 'title body';
		if(is_array($data['searchFields'])) $data['searchFields'] = implode(' ', $data['searchFields']);
		$inputfield->attr('value', $data['searchFields']);
		$inputfield->label = "Default fields to search";
		$inputfield->description = "Enter the names for one or more text-based fields that you want to search, separating each by a space. ";
		$inputfields->append($inputfield);

		$inputfield = Wire::getFuel('modules')->get("InputfieldText");
		$inputfield->attr('name', 'displayField');
		$inputfield->attr('value', isset($data['displayField']) ? $data['displayField'] : 'name');
		$inputfield->label = "Default field name(s) to display in search results";
		$inputfield->description = "If specifying more than one field, separate each with a space.";
		$inputfields->append($inputfield);

		$inputfield = Wire::getFuel('modules')->get("InputfieldSelect");
		$inputfield->attr('name', 'operator');
		$inputfield->attr('value', isset($data['operator']) ? $data['operator'] : self::defaultOperator);
		$inputfield->label = "Default search operator";
		foreach(self::getOperators() as $operator => $label) {
			$inputfield->addOption($operator, "$operator $label"); 
		}
		$inputfields->append($inputfield);

		return $inputfields;
	}


}
