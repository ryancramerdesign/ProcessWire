<?php

/**
 * ProcessWire Edit Link Process
 *
 * Provides the link capability as used by the TinyMCE Inputfield
 * Works in combination with /modules/Inputfield/InputfieldTinyMCE/plugins/pwlink/editor_plugin.js
 * 
 * For more details about how Process modules work, please see: 
 * /wire/core/Process.php 
 * 
 * ProcessWire 2.x 
 * Copyright (C) 2011 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessPageEditLink extends Process {

	protected $page = null;

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Edit Link',          
			'summary' => 'Provides a link capability as used by some Fieldtype modules (like TinyMCE)', 
			'version' => 101, 
			'permanent' => true, 
			'permission' => 'page-edit',
			);
	}

	public function init() {
		$this->modules->get("ProcessPageList"); 	
		$id = (int) $this->input->get->id;
		
		if($id) $this->page = $this->pages->get($id); 
		if($this->page && $this->page->id && !$this->user->hasPermission("page-view", $this->page)) throw new WireException("You don't have access to this page"); 
		//$target = $this->sanitizer->name($this->input->get->target); 
		//$this->config->js('ProcessPageEditLinkTarget', $target); 
		
		$lang_id = $this->input->get->lang ? (int) $this->input->get->lang : 0; 
		
		$this->config->js('ProcessPageEditLink', array(
			'selectStartLabel' => $this->_("Choose page"), // Clickable link to start a page selection
			'langID' => "$lang_id"
			)); 
		parent::init();
	}

	public function ___execute() {

		$form = $this->modules->get("InputfieldForm"); 
		$form->attr('id', 'ProcessPageEditLinkForm');
		$form->description = $this->_("Enter a URL, select a page, or select a file to link:"); // Headline

		$field = $this->modules->get("InputfieldURL"); 
		$field->label = $this->_("Link to URL");
		$field->attr('id+name', 'link_page_url'); 
		$form->append($field); 

		$field = $this->modules->get("InputfieldInteger"); 
		$field->label = $this->_("Link to Page");
		$field->attr('id+name', 'link_page_id'); 
		$field->collapsed = Inputfield::collapsedYes; 
		$form->append($field); 

		$form->append($this->getFilesField()); 

		$field = $this->modules->get("InputfieldCheckbox"); 
		$field->label = $this->_("Launch In New Window?");
		$field->description = $this->_("If checked, the link will open in a new window leaving the current window in place."); // Details for 'launch in new window' checkbox
		$field->attr('id+name', 'link_target'); 
		$field->attr('value', '_blank'); 
		$field->collapsed = Inputfield::collapsedYes; 
		$form->append($field); 

		return $form->render();
	}

	public function ___executeFiles() {
		if(!$this->page->id) throw new WireException("A page id must be specified"); 	
		$files = $this->getFiles();	
		return WireEncodeJSON($files);
	}

	protected function getFiles() {
		$files = array();
		foreach($this->page->fields as $f) {
			if(!$f->type instanceof FieldtypeFile) continue;
			foreach($this->page->get($f->name) as $file) {
				$files[$file->url] = $f->name . ' - ' . $file->basename; 
			}
		}
		asort($files); 
		return $files;
	}

	protected function getFilesField() {
		$field = $this->modules->get("InputfieldSelect"); 
		$field->label = $this->_("Link to File");
		$field->attr('id+name', 'link_page_file'); 
		$files = $this->getFiles();
		$field->addOption('');
		$field->addOptions($files); 
		$field->collapsed = Inputfield::collapsedYes; 
		$field->notes = $this->page->url; 
		$field->description = $this->_("To select a file from another page, click 'Link to Page' above and choose the page you want to select a file from."); // Instruction on how to select a file from another page
		return $field;

	}

	

}

