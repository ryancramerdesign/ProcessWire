<?php

/**
 * ProcessWire Page Table Fieldtype
 *
 * Concept by Antti Peisa
 * Code by Ryan Cramer
 * Sponsored by Avoine
 *
 * ProcessWire 2.x 
 * Copyright (C) 2014 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class FieldtypePageTable extends FieldtypeMulti implements Module {

	public static function getModuleInfo() {
		return array(
			'title' => 'ProFields: Page Table',
			'version' => 4,
			'summary' => 'A fieldtype containing a group of editable pages.',
			'installs' => 'InputfieldPageTable',
			'autoload' => true, 
			'requires' => 'ProcessWire>=2.4.2'
			);
	}

	/**
	 * Initialize the PageTable hooks
	 * 
	 */
	public function init() {
		$pages = $this->wire('pages'); 
		$pages->addHookAfter('delete', $this, 'hookPagesDelete');
		$pages->addHookAfter('deleteReady', $this, 'hookPagesDeleteReady'); 
		$pages->addHookAfter('cloned', $this, 'hookPagesCloned'); 
	}

	/**
	 * Hook called when a page is deleted
	 * 
	 * Used to delete references to the page in any PageTable tables
	 *
	 */
	public function hookPagesDelete(HookEvent $event) {
		$page = $event->arguments(0); 
		foreach($this->wire('fields') as $field) {
			if(!$field->type instanceof FieldtypePageTable) continue; 
			$table = $this->wire('database')->escapeTable($field->table); 
			$sql = "DELETE FROM `$table` WHERE pages_id=:pages_id OR data=:data";
			$query = wire('database')->prepare($sql); 
			$query->bindValue(':pages_id', (int) $page->id); 
			$query->bindValue(':data', (int) $page->id); 
			$query->execute();
		}
	}

	/**
	 * Hook called when a page is about to be deleted
	 * 
	 * This automatically trashes the PageTable pages that a deleted page owns, if the autoTrash option is true. 
	 * This is really only applicable when PageTable pages are stored somewhere other than as children of the 
	 * deleted page. 
	 *
	 */
	public function hookPagesDeleteReady(HookEvent $event) {
		$page = $event->arguments(0); 
		foreach($page->template->fieldgroup as $field) {
			if(!$field->type instanceof FieldtypePageTable) continue; 
			if(!$field->parent_id || !$field->autoTrash) continue; 
			$value = $page->getUnformatted($field->name); 
			if(!count($value)) continue; 
			foreach($value as $item) {	
				if($item->isTrash()) continue; 
				$this->wire('pages')->message("Auto Trash Item: $item->url", Notice::debug); 
				$this->wire('pages')->trash($item); 
			}
		}
	}

	/**
	 * Hook called when a page is cloned
	 * 
	 * We use this to clone and save any PageTable fields owned by the cloned page. 
	 * This ensures we don't get two pages referring to the same PageTable fields. 
	 * 
	 * @param HookEvent $event
	 * 
	 */
	public function hookPagesCloned(HookEvent $event) {

		static $clonedIDs = array();

		$page = $event->arguments(0); 
		$copy = $event->arguments(1); 

		if(in_array($copy->id, $clonedIDs)) return;
		$clonedIDs[] = $copy->id; 
	
		foreach($copy->template->fieldgroup as $field) {
			if(!$field->type instanceof FieldtypePageTable) continue; 
			//if(!$field->parent_id) continue; // let that be handled manually since recursive clones are already an option
			$parent = $field->parent_id ? $this->wire('pages')->get($field->parent_id) : $copy; 
			$value = $copy->getUnformatted($field->name); 
			if(!count($value)) continue; 
			$newValue = new PageArray();
			foreach($value as $item) {
				try { 
					$newItem = null;
					if(!$field->parent_id && $copy->numChildren) {
						// value was already cloned by API with recursive option?
						$newItem = $this->wire('pages')->get("parent=$copy, name=$item->name"); 
						if(!$newItem->id) $newItem = null; 
					}
					if(!$newItem) $newItem = $this->wire('pages')->clone($item, $parent); 
					if($newItem->id) {
						$newValue->add($newItem); 
						$this->wire('pages')->message("Cloned item $item->path", Notice::debug); 
					}
				} catch(Exception $e) {
					$this->wire('pages')->error("Error cloning $item->path"); 
				}
			}
			$copy->set($field->name, $newValue); 
			$copy->save($field->name); 
		}
	}

	/**
	 * Install our ajax lister at ready() time, if the conditions are right
	 * 
	 * Note that additional conditions are required and checked for by InputfieldPageTableAjax class. 
	 * 
	 */
	public function ready() {
		if(	$this->wire('config')->ajax && 
			$this->wire('input')->get('InputfieldPageTableField') && 
			$this->wire('user')->isLoggedin() && 
			$this->wire('page')->template == 'admin') {
			// handle ajax request to render table
			require_once($this->wire('config')->paths->InputfieldPageTable . 'InputfieldPageTableAjax.php'); 
			new InputfieldPageTableAjax();
		}
	}

	/**
	 * Return the database schema used by this Fieldtype
	 * 
	 * @param Field $field
	 * @return array
	 * 
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field);
		$schema['data'] = 'int NOT NULL';
		$schema['keys']['data'] = 'KEY data (data, pages_id, sort)';
		return $schema;
	}

	/**
	 * Get the match query for page selection, delegated to FieldtypePage
	 * 
	 * @param DatabaseQuerySelect $query
	 * @param string $table
	 * @param string $subfield
	 * @param string $operator
	 * @param mixed $value
	 * @return DatabaseQuery
	 * 
	 */
	public function getMatchQuery($query, $table, $subfield, $operator, $value) {
		return $this->wire('modules')->get('FieldtypePage')->getMatchQuery($query, $table, $subfield, $operator, $value); 	
	}

	/**
	 * Get the Inputfield used for input by PageTable
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @return Inputfield
	 * 
	 */
	public function getInputfield(Page $page, Field $field) {
		$inputfield = $this->modules->get('InputfieldPageTable'); 
		$inputfield->attr('value', $page->getUnformatted($field->name)); 
		return $inputfield; 
	}

	/**
	 * Sanitize a PageTable value
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param int|object|string|WireArray $value
	 * @return int|object|PageArray|string|WireArray
	 * 
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {
		if(is_array($value) && count($value)) $value = $this->wakeupValue($page, $field, $value); 
		if(!$value instanceof PageArray) return new PageArray();	
		foreach($value as $item) {
			if($this->isValidItem($page, $field, $item)) continue; 
			$value->remove($item); 
		}
		return $value; 
	}

	/**
	 * Return true or false as to whether the item is valid for this PageTable
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param Page $item
	 * @return bool
	 * 
	 */
	protected function isValidItem(Page $page, Field $field, Page $item) {
		$template_id = $field->template_id; 
		if(is_array($template_id)) {
			if(in_array($item->template->id, $template_id)) return true; 
		} else {
			// old style for backwards compatibility
			if($template_id == $item->template->id) return true; 
		}
		return false; 
	}

	/**
	 * Return a blank value used by a PageTable
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @return PageArray
	 * 
	 */
	public function getBlankValue(Page $page, Field $field) {
		return new PageArray();
	}

	/**
	 * Return a formatted PageTable value, which is essentially a new PageArray with hidden items removed
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param PageArray $value
	 * @return PageArray
	 *
	 */
	public function ___formatValue(Page $page, Field $field, $value) {
		$formatted = new PageArray();
		if(!$value instanceof PageArray) return $formatted; 
		foreach($value as $item) {
			if($item->status >= Page::statusHidden) continue; 
			$formatted->add($item); 
		}
		return $formatted; 
	}

	/**
	 * Prep a value for storage
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param PageArray $value
	 * @return array
	 * 
	 */
	public function ___sleepValue(Page $page, Field $field, $value) {
		$sleepValue = array();
		if(!$value instanceof PageArray) return $sleepValue; 
		foreach($value as $item) {
			if(!$item->id) continue; 
			if(!$this->isValidItem($page, $field, $item)) continue; 
			$sleepValue[] = $item->id; 
		}
		return $sleepValue; 
	}

	/**
	 * Wake up a stored value
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param array $value
	 * @return PageArray
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {
		if(!is_array($value) || !count($value) || empty($field->template_id)) return $this->getBlankValue($page, $field);
		$template_id = $field->template_id; 
		if(!is_array($template_id)) { 
			$template_id = $template_id ? array($template_id) : array();
		}
		if(count($template_id) == 1) {
			$template = $this->wire('templates')->get(reset($template_id));
			$items = $this->wire('pages')->getById($value, $template); 
		} else {
			$items = $this->wire('pages')->getById($value); 
		}
			
		return $items; 
	}

	/**
	 * Get information used by selectors for querying this field
	 * 
	 * @param Field $field
	 * @param array $data
	 * @return array
	 * 
	 */
	public function ___getSelectorInfo(Field $field, array $data = array()) {
		$info = $this->wire('modules')->get('FieldtypePage')->getSelectorInfo($field, $data); 
		$info['operators'] = array(); // force it to be non selectable, subfields only
		return $info; 
	}

	/**
	 * Return configuration fields definable for each FieldtypePage
	 * 
	 * @param Field $field
	 * @return InputfieldWrapper
	 *
	 */
	public function ___getConfigInputfields(Field $field) {

		$inputfields = parent::___getConfigInputfields($field);

		$f = $this->wire('modules')->get('InputfieldAsmSelect');
		$f->attr('name', 'template_id');
		$f->label = $this->_('Select one or more templates for items');
		foreach($this->wire('templates') as $template) {
			if($template->flags & Template::flagSystem) continue; 
			$f->addOption($template->id, $template->name); 
		}
		$value = $field->template_id; 
		if(!is_array($value)) $value = $value ? array($value) : array();
		$f->attr('value', $value); 
		$f->required = true; 
		$f->description = $this->_('These are the templates that will be used by pages managed from this field. You may wish to create a new template specific to the needs of this field.'); // Templates selection description
		$f->notes = $this->_('Please hit Save after selecting a template and the remaining configuration on the Input tab will contain more context.'); // Templates selection n otes 
		$inputfields->add($f);

		$f = $this->wire('modules')->get('InputfieldPageListSelect'); 
		$f->attr('name', 'parent_id'); 
		$f->label = $this->_('Select a parent for items'); 
		$f->description = $this->_('All items created and managed from this field will live under the parent you select here.'); 
		$f->notes = $this->_('This is optional. If no parent is selected, then items will be placed as children of the page being edited.'); 
		$f->collapsed = $field->parent_id ? Inputfield::collapsedNo : Inputfield::collapsedYes;
		$f->attr('value', (int) $field->parent_id); 
		$inputfields->add($f);

		$f = $this->wire('modules')->get('InputfieldCheckbox'); 
		$f->attr('name', 'autoTrash'); 
		$f->attr('value', 1); 
		if($field->autoTrash) $f->attr('checked', 'checked'); 
		$f->label = $this->_('Trash items when page is deleted?'); 
		$f->description = $this->_('When checked, items created/managed by a given page will be automatically trashed when that page is deleted. If not checked, the items will remain under the parent you selected above.'); // autoTrash option description
		$f->notes = $this->_('This option applies only if you have selected a parent above.'); 
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->add($f); 

		return $inputfields;
	}


}

