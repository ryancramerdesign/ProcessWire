<?php

/**
 * ProcessWire Page List Select Multiple Inputfield module
 *
 * A Page List Selector for selecting multiple pages
 *
 * ProcessWire 2.x 
 * Copyright (C) 2010 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class InputfieldPageListSelectMultiple extends Inputfield implements InputfieldHasArrayValue {

	public static function getModuleInfo() {
		return array(
			'title' => __('Page List Select Multiple', __FILE__), // Module Title
			'summary' => __('Selection of multiple pages from a ProcessWire page tree list', __FILE__), // Module Summary
			'version' => 100,
			'permanent' => true, 
			);
	}

	public function init() {
		parent::init();
		$this->fuel('modules')->get('ProcessPageList'); // prerequisite modules
		$this->set('parent_id', 0); 
		$this->set('labelFieldName', 'title'); 
	}

	protected function renderListItem($label, $value, $class = '') {
		if($class) $class = " $class";
		$out = 	"\n<li class='ui-state-default$class'>" . 
			"<span class='ui-icon ui-icon-arrowthick-2-n-s'></span>" . 
			"<span class='itemValue'>$value</span>" . 
			"<span class='itemLabel'>$label</span> " . 
			"<a class='itemRemove' href='#'><span class='ui-icon ui-icon-trash'>remove</span></a>" . 
			"</li>";
		return $out; 
	}

	public function ___render() {

		if(!strlen($this->parent_id)) {
			return "<p class='error'>" . $this->_('Unable to render this field due to missing parent page in field settings.') . '</p>';
		}

		$out = '';
		$selectStartLabel = $this->_('Add');
		$selectCancelLabel = $this->cancelLabel;

		$out .= "\n<ol id='{$this->id}_items'>"; 
		$out .= $this->renderListItem("Label", "1", "itemTemplate"); 

		foreach($this->value as $page_id) {
			$page = $this->pages->get((int) $page_id); 
			if(!$page || !$page->id) continue; 
			$out .= $this->renderListItem($page->get($this->labelFieldName), $page->id); 
		}
		$out .= "\n</ol>";

		$attrs = $this->getAttributes();
		unset($attrs['value']); 
		$value = implode(',', $this->value); 
		$attrStr = $this->getAttributesString($attrs) . " value='$value'";
		$out .=	"\n<input type='text' $attrStr />";

		$out .= "\n<script>$(document).ready(function() { " . 
			"var t = $('#{$this->id}'); " . 
			"t.ProcessPageList({ " . 
				"mode: 'select', " . 
				"rootPageID: {$this->parent_id}, " . 
				"selectStartLabel: '$selectStartLabel', " . 
				"selectShowPageHeader: false, " . 
				"selectSelectHref: '#wrap_{$this->id}', " . 
				"selectCancelLabel: '$selectCancelLabel' " . 
			"}).hide()" . 
			".bind('pageSelected', t, InputfieldPageListSelectMultiple.pageSelected)" . 
			"}); " . 
			"InputfieldPageListSelectMultiple.init($('#{$this->id}_items')); " . 
			"</script>";

		return $out; 
	}

	/**
	 * Convert the CSV string provide in the $input to an array of ints needed for this fieldtype
	 *
	 */
	public function ___processInput(WireInputData $input) {

		parent::___processInput($input); 

		$value = $this->attr('value');	
		if(is_array($value)) $value = reset($value); 
		$value = trim($value); 

		if(strpos($value, ",") !== false) $value = explode(",", $value); 
			else if($value) $value = array($value);
			else $value = array();

		foreach($value as $k => $v) {
			$value[$k] = (int) $v; 
		}

		$this->attr('value', $value); 

		return $this; 
	}
	
}
