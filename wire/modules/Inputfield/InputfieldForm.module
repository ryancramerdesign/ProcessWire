<?php

/**
 * InputfieldForm: An Inputfield for containing form elements
 *
 */
class InputfieldForm extends InputfieldWrapper {

	public static function getModuleInfo() {
		return array(
			'title' => __('Form', __FILE__), // Module Title
			'summary' => __('Contains one or more fields in a form', __FILE__), // Module Summary
			'version' => 104,
			'permanent' => true, 
			);
	}

	public function __construct() {
		parent::__construct();
		$this->attr('method', 'post'); 
		$this->attr('action', './'); 
		$this->set('protectCSRF', true); 
		$this->set('class', ''); 
	}

	public function ___render() {

		$this->attr('data-colspacing', (int) $this->columnWidthSpacing); 
		$this->attr('class', trim($this->attr('class') . ' InputfieldForm'));
		$attrs = $this->getAttributes();
		unset($attrs['value']); 

		if($this->input->get('modal') && strpos($attrs['action'], 'modal=1') === false) {
			// retain a modal=1 state in the form action
			$attrs['action'] .= (strpos($attrs['action'], '?') === false ? '?' : '&') . 'modal=1';
		}

		$description = $this->getSetting('description'); 
		if($description) $description = "\n<h2>" . $this->entityEncode($description) . "</h2>"; 

		$attrStr = $this->getAttributesString($attrs); 

		if($this->protectCSRF && $this->attr('method') == 'post') {
			$tokenName = wire('session')->CSRF->getTokenName();
			$tokenValue = wire('session')->CSRF->getTokenValue();
			$tokenField = "<input type='hidden' id='_post_token' name='$tokenName' value='$tokenValue' />";
		} else {
			$tokenField = '';
		}

		$out = 	"\n<form $attrStr>" . 
			$description . 
			parent::___render() . 
			$tokenField . 
			"\n</form>";

		return $out; 
	}

	public function ___processInput(WireInputData $input) {
		
		if($this->protectCSRF && $this->attr('method') == 'post') wire('session')->CSRF->validate(); // throws exception if invalid
		$result = parent::___processInput($input); 		
		
		$delayedChildren = $this->_getDelayedChildren(true); 
		$this->processInputShowIf($input, $delayedChildren);
		$this->processInputRequiredIf($input, $delayedChildren);
	
		return $result;
	}

	/**
	 * Process input for show-if dependencies
	 * 
	 * @param WireInputData $input
	 * @param array $delayedChildren
	 * 
	 */
	protected function processInputShowIf(WireInputData $input, array $delayedChildren) {
		
		if(!count($delayedChildren)) return;

		$maxN = 255;
		$n = 0;
		$delayedN = count($delayedChildren);
		$processedN = 0;
		$unprocessedN = 0;
		$debug = false; 
		
		$savedChildren = $delayedChildren;

		while(count($delayedChildren)) {

			if(++$n >= $maxN) {
				$this->error("Max number of iterations reached for processing field dependencies", Notice::debug);
				break;
			}

			// shift first $child off the array
			$child = array_shift($delayedChildren);
			$selectorString = $child->getSetting('showIf'); 
			if(!strlen($selectorString)) continue; 
			
			if($debug) $this->message("showIf selector: $selectorString"); 
			$selectors = new Selectors($selectorString); 
			
			// whether we should process $child now or not
			$processNow = true; 

			foreach($selectors as $selector) {

				$fields = is_array($selector->field) ? $selector->field : array($selector->field);

				// first determine that the dependency fields have already been processed
				foreach($fields as $name) {
					if($debug) $this->message("$child->name requires: $name"); 

					if(isset($savedChildren[$name]) && $name !== "1") {
						
						// if field had already been through the loop, but was not processed, add it back in for processing
						if(!isset($delayedChildren[$name]) && !$savedChildren[$name]->showIfProcessed) $delayedChildren[$name] = $savedChildren[$name];
						
						// force $delayedChildren[$name] to match so that it is processed here, by giving it special selctor: 1>0
						if(!strlen($savedChildren[$name]->getSetting('showIf'))) $savedChildren[$name]->showIf = '1>0'; // forced match
						
						// dependency $field is another one in $delayedChildren, send it back to the end
						if(!$savedChildren[$name]->showIfProcessed) {
							unset($delayedChildren[$child->name]);
							// put it back on the end
							$delayedChildren[$child->name] = $child; 
							if($debug) $this->message("Sending field '$child->name' back to the end."); 
							$processNow = false;
						}
						break;
						
					} else {
						// $field is most likely a form field has already been processed and is good to use
						$processNow = true; 
					}
				}

				if(!$processNow) break; // out to next $child
			
				// good to process $child
				foreach($fields as $name) {
					if($name == '1') continue;
				
					$subfield = '';
					if(strpos($name, '.')) list($name, $subfield) = explode('.', $name); 

					// get the inputfield that $child has a dependency on
					$dependencyChild = $this->getChildByName($name);

					// if field is not present in this form, we assume a blank value for it
					if(!$dependencyChild) {
						$this->error("Warning: dependency field '$name' is not present in this form.", Notice::debug);
						continue;
					}

					$value = $dependencyChild->attr('value');
					if($subfield == 'count') $value = count($value); 
					if(is_object($value)) $value = "$value";

					if(!$selector->matches($value)) {
						if($debug) $this->message("Selector failed to match (value: $value): " . $selector); 
						$processNow = false;
						break;
					}
					
				} // $fields
	
				if(!$processNow) break;
				
				if($debug) $this->message("$child->name - matched: showIf($selector)");
				$processedN++;

			} // $selectors
			
			if($debug && $subfield == 'count') $this->message("actual count: $value"); 
			
			if(!$processNow) {
				if($debug) {
					$this->message("$child->name - did not match: showIf($selector)"); 
					$this->message("Skipped processing for: $child->name"); 
				}
				$child->set('showIfSkipped', true); // flag the field as skipped
				$unprocessedN++;
				// since this didn't match, then no other selectors in the group for this child can match, so break out of the selector loop
				continue; // to next $child
			}
			
			// the required dependency is in place so that $child can be processed
			// temporarily remove the showIf property to prevent InputfieldWrapper's from delaying it again
			$showIf = $child->getSetting('showIf');
			$child->set('showIf', ''); // remove showIf property
			$child->processInput($input); // process input
			if($showIf != '1>0') $child->set('showIf', $showIf); // restore showIf property
			$child->set('showIfProcessed', true); // flag it as processed
			if($debug) $this->message("$child->name - processed!");

		} // count($delayedChildren)

		if($debug) $this->message("delayedChildren: $delayedN ($processedN processed, $unprocessedN not)");

	}

	/**
	 * Process input for fields with a required-if dependency
	 * 
	 * @param WireInputData $input
	 * @param array $delayedChildren
	 * @return bool
	 * 
	 */
	protected function processInputRequiredIf(WireInputData $input, array $delayedChildren) {
		
		$debug = false;

		// process input for any remaining delayedChildren not already processed by processInputShowIf
		foreach($delayedChildren as $child) {
			if($child->showIfSkipped || $child->showIfProcessed) continue; 
			$child->processInput($input); 
		}

		while(count($delayedChildren)) {
			
			// shift first $child off the array
			$child = array_shift($delayedChildren);
			if(!$child->getSetting('required')) continue; 
			
		
			// if field was not shown, then it can't be required
			if($child->showIfSkipped) continue;

			$required = true; 
			$selectorString = $child->getSetting('requiredIf');

			if(strlen($selectorString)) {
				if($debug) $this->message("requiredIf selector: $selectorString");
					
				$selectors = new Selectors($selectorString);
		
				foreach($selectors as $selector) {
		
					$fields = is_array($selector->field) ? $selector->field : array($selector->field);
		
					foreach($fields as $name) {
		
						$subfield = '';
						if(strpos($name, '.')) list($name, $subfield) = explode('.', $name);
		
						// get the inputfield that $child has a dependency on
						$dependencyChild = $this->getChildByName($name);
		
						// if field is not present in this form, we assume a blank value for it
						if(!$dependencyChild) {
							$this->error("Warning: required dependency field '$name' is not present in this form.", Notice::debug);
							continue;
						}
		
						$value = $dependencyChild->attr('value');
						if($subfield == 'count') $value = count($value);
						if(is_object($value)) $value = "$value";

						if(!$selector->matches($value)) {
							if($debug) $this->message("$name - did not match: requiredIf($selector)");
							$required = false;
							break;
						}
		
					} // foreach($fields)
		
					if(!$required) break;
		
				} // foreach($selectors)
			} // if(strlen($selectorString))
			
			if($required) {
				if($child->isEmpty()) {
					if($debug) $this->message("$child->name - determined that value IS required and is not present (error)");
					$child->error($this->requiredLabel); // requiredLabel from InputfieldWrapper
				} else {
					if($debug) $this->message("$child->name - determined that value IS required and is populated (good)");
				}
			} else {
				if($debug) $this->message("$child->name - determined that value is not required");
			}
			
		}
	}

}

