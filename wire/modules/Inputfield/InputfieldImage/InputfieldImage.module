<?php

class InputfieldImage extends InputfieldFile {

	public static function getModuleInfo() {
		return array(
			'title' => 'Images',
			'version' => 100,
			'summary' => 'One or more image uploads (sortable)',
			'permanent' => true, 
			);
	}

	public function init() {
		parent::init();
		$this->set('extensions', 'JPG JPEG GIF PNG');
		$this->set('adminThumbs', false); 
		$this->set('maxWidth', ''); 
		$this->set('maxHeight', ''); 
		$this->set('adminThumbHeight', 100); 
		//$this->modules->get("InputfieldFile"); // force the JS and CSS from InputfieldFile to also be loaded
		$this->modules->get("JqueryFancybox"); 
	}

	public function ___render() {
		$this->config->scripts->add($this->config->urls->InputfieldFile . "InputfieldFile.js");
		$this->config->styles->add($this->config->urls->InputfieldFile . "InputfieldFile.css");
		return parent::___render();
	}

	/**
	 * Resize images to max width/height if specified in field config and image is larger than max
	 *
	 */
	protected function ___fileAdded(Pagefile $pagefile) {

		$filename = $pagefile->filename; 
		$pagefile2 = null;

		if($this->maxWidth && $pagefile->width > $this->maxWidth) {
			$pagefile2 = $pagefile->width($this->maxWidth); 
			unlink($pagefile->filename); 
			rename($pagefile2->filename, $pagefile->filename); 
			$pagefile->getImageInfo(true); // force it to reload it's dimensions
		}

		if($this->maxHeight && $pagefile->height > $this->maxHeight) {
			$pagefile2 = $pagefile->height($this->maxHeight); 
			unlink($pagefile->filename); 
			rename($pagefile2->filename, $pagefile->filename); 
			$pagefile->getImageInfo(true); 
		}

		if($pagefile2) {
			$this->message("Resized '{$pagefile->basename}' to {$pagefile->width}x{$pagefile->height} fit within max dimensions of {$this->maxWidth}x{$this->maxHeight}"); 
		}

		parent::___fileAdded($pagefile); 
		
	}
	
	protected function renderItem($pagefile, $id, $n) {

		$thumb = $pagefile; 

		if($this->adminThumbs && $thumb->height > $this->adminThumbHeight) {
			// create a variation for display with this inputfield
			$thumb = $thumb->height($this->adminThumbHeight); 
		}

		$out = 	"\n\t<li class='InputfieldFile InputfieldImage ui-widget'>" . 
			"\n\t\t<p class='InputfieldFileInfo ui-widget ui-widget-header'>" . 
			"\n\t\t\t<span class='ui-icon ui-icon-arrowthick-2-n-s'> </span>" . 
			"\n\t\t\t<span class='InputfieldFileName'>{$pagefile->basename}</span> " . 
			"\n\t\t\t<span class='InputfieldFileStats'>&bull; {$pagefile->filesizeStr} &bull; {$pagefile->width}x{$pagefile->height}</span> " . 
			"\n\t\t\t<label class='InputfieldFileDelete'><input type='checkbox' name='delete_$id' value='1' /><span class='ui-icon ui-icon-trash'>Delete</span></label>" . 
			"\n\t\t</p>" . 
			"\n\t\t<p class='InputfieldFileData ui-widget ui-widget-content'>" . 
			"\n\t\t\t<a class='InputfieldFileLink' target='_blank' href='{$pagefile->url}'><img src='{$thumb->url}' alt='{$pagefile->basename}' /></a>" . 
	//		"\n\t\t\t<label class='InputfieldFileDescription'>Description <input type='text' name='description_$id' value='$description' /></label>" . 
			"\n\t\t\t" . $this->renderItemDescriptionField($pagefile, $id, $n) . 
			"\n\t\t\t<input class='InputfieldFileSort' type='text' name='sort_$id' value='$n' />" . 
			"\n\t\t</p>" . 
			"\n\t</li>";

		return $out; 
	}

	public function ___getConfigInputfields() {

		$inputfields = parent::___getConfigInputfields();
	
		$field = $this->modules->get('InputfieldCheckbox'); 
		$field->attr('name', 'adminThumbs'); 
		$field->attr('value', 1); 
		$field->attr('checked', $this->adminThumbs ? 'checked' : ''); 
		$field->label = 'Display thumbnails in page editor?'; 
		$field->description = 'Thumbnails take up less space and make it easier to sort multiple images. If unchecked, the full (original) size image will be shown in the page editor.';
		$inputfields->add($field); 

		$fieldset = $this->modules->get('InputfieldFieldset');
		$fieldset->label = "Max Image Dimensions";
		$fieldset->collapsed = $this->maxWidth || $this->maxHeight ? Inputfield::collapsedNo : Inputfield::collapsedYes; 
		$fieldset->description = 
			"Optionally enter the max width and/or height of uploaded images. " . 
			"If specified, images will be resized at upload time when they exceed either the max width or height. " . 
			"The resize is performed at upload time, and thus does not affect any images in the system, or images added via the API.";

		$field = $this->modules->get("InputfieldInteger"); 
		$field->attr('name', 'maxWidth'); 
		$field->attr('value', $this->maxWidth ? (int) $this->maxWidth : ''); 
		$field->label = "Max width for uploaded images"; 
		$field->description = "Enter the value in number of pixels or leave blank for no max."; 
		$fieldset->add($field); 

		$field = $this->modules->get("InputfieldInteger"); 
		$field->attr('name', 'maxHeight'); 
		$field->attr('value', $this->maxHeight ? (int) $this->maxHeight : ''); 
		$field->label = "Max height for uploaded images"; 
		$field->description = "Enter the value in number of pixels or leave blank for no max."; 
		$fieldset->add($field); 

		$inputfields->add($fieldset); 
		
		return $inputfields; 	
	}
}
