<?php

/**
 * An Inputfield for handling file uploads
 *
 */
class InputfieldFile extends Inputfield {

	public static function getModuleInfo() {
		return array(
			'title' => __('Files', __FILE__), // Module Title
			'summary' => __('One or more file uploads (sortable)', __FILE__), // Module Summary
			'version' => 100,
			'permanent' => true, 
			);
	}

	/**
	 * Cache of responses we'll be sending on ajax requests
	 *
	 */
	protected $ajaxResponses = array();

	/**
	 * Was a file replaced? 
	 *
	 */
	protected $singleFileReplacement = false;

	/**
	 * Initialize the InputfieldFile
	 *
	 */
	public function init() {
		parent::init();

		// note: these two fields originate from FieldtypeFile. 
		// Initializing them here ensures this Inputfield has the values set automatically.
		$this->set('extensions', '');
		$this->set('maxFiles', 0); 
		$this->set('maxFilesize', 0); 
		$this->set('useTags', 0); 

		// native to this Inputfield
		$this->set('unzip', 0); 
		$this->set('overwrite', 0); 
		$this->set('descriptionRows', 1); 
		$this->set('destinationPath', ''); 
		$this->set('itemClass', 'InputfieldFile ui-widget ui-widget-content'); 
		$this->set('descriptionFieldLabel', $this->_('Description')); // Description field label
		$this->set('tagsFieldLabel', $this->_('Tags')); // Tags field label
		$this->setAttribute('type', 'file'); 

		// get the max filesize
		$filesize = trim(ini_get('post_max_size'));
		$last = strtolower(substr($filesize, -1));
		if($last == 'g') $this->maxFilesize = (($filesize*1024)*1024)*1024;
			else if($last == 'm') $this->maxFilesize = ($filesize*1024)*1024;
			else if($last == 'k') $this->maxFilesize = $filesize*1024;
			else $this->maxFilesize = (5*1024)*1024; 
	}

	/**
	 * Per Inputfield interface, returns true when this field is empty
	 *
	 */
	public function isEmpty() {
		return !count($this->value);
	}

	/**
	 * Check to ensure that the containing form as an 'enctype' attr needed for uploading files
	 *
	 */
	protected function checkFormEnctype() {
		$parent = $this->parent;
		while($parent) {
			if($parent->attr('method') == 'post') {
				if(!$parent->attr('enctype')) $parent->attr('enctype', 'multipart/form-data');
				break;
			}
			$parent = $parent->parent; 
		}
	}

        /**
         * Set the parent of this Inputfield
         *
         * @param Inputfield $parent
         *
         */
        public function setParent(InputfieldWrapper $parent) {
		parent::setParent($parent); 
		$this->checkFormEnctype();
                return $this;
        }

	protected function pagefileId(Pagefile $pagefile) {
		return $this->name . "_" . $pagefile->hash; 
	}


	protected function renderItemDescriptionField(Pagefile $pagefile, $id, $n) {
		$out = '';

		if($this->descriptionRows > 0) {
			$description = htmlspecialchars($pagefile->description, ENT_QUOTES, "UTF-8"); 
			if($this->descriptionRows > 1) $out = "<textarea name='description_$id' rows='{$this->descriptionRows}'>$description</textarea>";
				else $out = "<input type='text' name='description_$id' id='description_$id' value='$description' />";
			$out = "<label class='InputfieldFileDescription'><span class='detail'>{$this->descriptionFieldLabel}</span>$out</label>"; // Description field label
		}

		if($this->useTags) {
			$tags = htmlspecialchars($pagefile->tags, ENT_QUOTES, "UTF-8"); 
			$out = 	"<label class='InputfieldFileTags'><span class='detail'>{$this->tagsFieldLabel}</span>" . 
				"<input type='text' name='tags_$id' id='tags_$id' value='$tags' />" . 
				"</label>" . 
				$out; 
		}

		return $out; 
	}

	protected function ___renderItem($pagefile, $id, $n) {

		$out = 	"\n\t\t<p class='InputfieldFileInfo ui-state-default'>" . 
			"\n\t\t\t<span class='ui-icon ui-icon-arrowthick-2-n-s'></span>" . 
			"\n\t\t\t<a class='InputfieldFileName' href='{$pagefile->url}'>{$pagefile->basename}</a> " . 
			"\n\t\t\t<span class='InputfieldFileStats'>{$pagefile->filesizeStr}</span> " . 
			"\n\t\t\t<label class='InputfieldFileDelete'><input type='checkbox' name='delete_$id' value='1' /><span class='ui-icon ui-icon-trash'>Delete</span></label>" . 
			"\n\t\t</p>" . 
			"\n\t\t<p class='InputfieldFileData description'>" . 
			"\n\t\t\t" . $this->renderItemDescriptionField($pagefile, $id, $n) . 
			"\n\t\t\t<input class='InputfieldFileSort' type='text' name='sort_$id' value='$n' />" . 
			"\n\t\t</p>";

		return $out; 
	}

	protected function renderItemWrap($out) {
		return 	"\n\t<li class='{$this->itemClass}'>$out\n\t</li>";
	}

	protected function ___renderList($value) {

		if(!$value) return '';
		$out = '';
		$n = 0; 
		$itemClass = $this->itemClass; 

		foreach($value as $k => $pagefile) {
			$id = $this->pagefileId($pagefile);
			$out .= $this->renderItemWrap($this->renderItem($pagefile, $id, $n++)); 
		}

		if($out) $out = "\n<ul class='InputfieldFileList'>$out\n</ul>";
		return $out; 
	}

	protected function ___renderUpload($value) {

		// enables user to choose more than one file
		if($this->maxFiles != 1) $this->setAttribute('multiple', 'multiple'); 

		$attrs = $this->getAttributes();
		unset($attrs['value']); 
		if(substr($attrs['name'], -1) != ']') $attrs['name'] .= '[]';

		$extensions = $this->extensions; 
		if($this->unzip && !$this->maxFiles) $extensions .= ' zip';

		$out =	"\n<p data-maxfilesize='{$this->maxFilesize}' data-extensions='{$extensions}' data-fieldname='$attrs[name]' class='InputfieldFileUpload'>" . 
			"\n\t<input type='hidden' class='InputfieldFileMaxFiles' value='{$this->maxFiles}' />" . 
			"\n\t<input " . $this->getAttributesString($attrs) . " />" . 
			"\n\t<span class='InputfieldFileValidExtensions detail'>" . htmlspecialchars(str_replace(' ', ', ', trim($extensions))) . "</span>" . 
			"\n\t<span class='AjaxUploadDropHere description'><span class='ui-icon ui-icon-arrowreturnthick-1-s ui-priority-secondary'></span>&nbsp; " . $this->_('drag and drop files in here') . "</span>" . // Ajax upload instruction
			"\n</p>";

		return $out; 
	}

	public function ___render() {
		return $this->renderList($this->value) . $this->renderUpload($this->value);
	}

	protected function ___fileAdded(Pagefile $pagefile) {

		$message = $this->_('Added file:') . " {$pagefile->basename}"; // Label that precedes an added filename

		if($this->config->ajax) {
			$n = count($this->value); 
			if($n) $n--; // for sorting
			$markup = $this->renderItemWrap($this->renderItem($pagefile, $this->pagefileId($pagefile), $n));	
			$this->ajaxResponse(false, $message, $pagefile->url, $pagefile->filesize(), $markup); 
		} else {
			$this->message($message); 
		}
			
	}

	protected function ___processInputAddFile($filename) {

		$total = count($this->value); 

		if($this->maxFiles > 1 && $total >= $this->maxFiles) return; 

		// allow replacement of file if maxFiles is 1
		if($this->maxFiles == 1 && $total) {
			$this->processInputDeleteFile($this->value->first());
			$this->singleFileReplacement = true; 
		}

		$this->value->add($filename); 
		$item = $this->value->last();
		$this->fileAdded($item); 
	}

	protected function ___processInputDeleteFile(Pagefile $pagefile) {
		$this->message($this->_("Deleted file:") . " $pagefile"); // Label that precedes a deleted filename
		$this->value->delete($pagefile); 
	}

	protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n) {

		$id = $this->name . '_' . $pagefile->hash; 		
		$changed = false; 

		foreach(array('description', 'tags') as $key) { 
			if(isset($input[$key . '_' . $id])) { 
				$value = trim($input[$key . '_' . $id]); 
				if($value != $pagefile->$key) {
					$pagefile->$key = $value; 
					$changed = true; 
				}
			}
		}

		if(isset($input['delete_' . $id])) {
			$this->processInputDeleteFile($pagefile); 
			$changed = true; 
		}

		$key = "sort_$id";
		$val = (int) $input->$key;
		if($val !== NULL) {
			$pagefile->sort = $val;
			if($n !== $val) $changed = true; 
		}

		return $changed; 
	}

	public function ___processInput(WireInputData $input) {
		
		if(is_null($this->value)) $this->value = new Pagefiles($this->fuel('page')); 
		if(!$this->destinationPath) $this->destinationPath = $this->value->path();
		if(!$this->destinationPath || !is_dir($this->destinationPath)) return $this->error($this->_("destinationPath is empty or does not exist")); 
		if(!is_writable($this->destinationPath)) return $this->error($this->_("destinationPath is not writable")); 

		$changed = false; 
		$total = count($this->value); 

		if($this->maxFiles <= 1 || $total < $this->maxFiles) { 

			$ul = new WireUpload($this->attr('name')); 
			$ul->setDestinationPath($this->destinationPath); 
			$ul->setOverwrite($this->overwrite); 
			$ul->setAllowAjax(true);

			if($this->maxFiles == 1) {
				$ul->setMaxFiles(1); 

			} else if($this->maxFiles) {
				$maxFiles = $this->maxFiles - $total; 
				$ul->setMaxFiles($maxFiles); 

			} else if($this->unzip) { 
				$ul->setExtractArchives(true); 
			}

			$ul->setValidExtensions(explode(' ', trim($this->extensions))); 

			foreach($ul->execute() as $filename) {
				$this->processInputAddFile($filename); 
				$changed = true; 
			}

			if($this->config->ajax) foreach($ul->getErrors() as $error) { 
				$this->ajaxResponse(true, $error); 
			}

		} else if($this->maxFiles) {
			// over the limit
			$this->ajaxResponse(true, $this->_("Max file upload limit reached")); 
		}

		$n = 0; 

		foreach($this->value as $pagefile) {
			if($this->processInputFile($input, $pagefile, $n)) $changed = true; 
			$n++; 
		}

		if($changed) {
			$this->value->sort('sort'); 
			$this->trackChange('value'); 
		}

		if(count($this->ajaxResponses) && $this->config->ajax) {
			echo json_encode($this->ajaxResponses); 
		}

		return $this; 
	}

	/**
	 * Send an ajax response
	 *
	 * $error bool Whether it was successful
	 * $message string Message you want to return
	 * $file string Full path and filename or blank if not applicable
	 *
	 */
	protected function ajaxResponse($error, $message, $file = '', $size = '', $markup = '') {
		$response = array(
			'error' => $error, 
			'message' => $message, 
			'file' => $file,
			'size' => $size,
			'markup' => $markup, 
			'replace' => $this->singleFileReplacement,
			);

		$this->ajaxResponses[] = $response; 
	}


	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields(); 

		$f = $this->modules->get("InputfieldCheckbox"); 
		$f->attr('name', 'unzip'); 
		$f->attr('value', 1); 
		$f->setAttribute('checked', $this->unzip ? 'checked' : ''); 
		$f->label = $this->_('Decompress ZIP files?');
		$f->description = $this->_("If checked, ZIP archives will be decompressed and all valid files added as uploads (if supported by the hosting environment). Max files must be set to 0 (no max) in order for ZIP uploads to be functional."); // Decompress ZIP files description
		$inputfields->append($f); 

		$f = $this->modules->get("InputfieldInteger"); 
		$f->attr('name', 'descriptionRows'); 
		$f->attr('value', $this->descriptionRows !== null ? (int) $this->descriptionRows : 1); 
		//$f->minValue = 0; 
		//$f->maxValue = 30; 
		$f->label = $this->_('Number of rows for description field?');
		$f->description = $this->_("Enter the number of rows available for the file description field, or enter 0 to not have a description field."); // Number of rows description
		$inputfields->append($f); 

		return $inputfields; 	
	}



}
