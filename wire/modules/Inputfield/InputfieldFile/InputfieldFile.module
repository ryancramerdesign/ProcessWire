<?php

/**
 * An Inputfield for handling file uploads
 *
 */
class InputfieldFile extends Inputfield implements InputfieldItemList {

	public static function getModuleInfo() {
		return array(
			'title' => __('Files', __FILE__), // Module Title
			'summary' => __('One or more file uploads (sortable)', __FILE__), // Module Summary
			'version' => 118,
			'permanent' => true, 
			);
	}
	
	/**
	 * Cache of responses we'll be sending on ajax requests
	 *
	 */
	protected $ajaxResponses = array();

	/**
	 * Was a file replaced? 
	 *
	 */
	protected $singleFileReplacement = false;

	/**
	 * Saved instanceof WireUpload in case API retrieval is needed (see getWireUpload() method)
	 *
	 */
	protected $wireUpload = null;

	/**
	 * Set to the current Pagefile item when doing iteration
	 * 
	 * @var Pagefile|null
	 * 
	 */
	protected $currentItem = null;

	/**
	 * True when field should behave in an upload only mode
	 * 
	 * @var bool
	 * 
	 */
	protected $uploadOnlyMode = false;

	/**
	 * Initialize the InputfieldFile
	 *
	 */
	public function init() {
		parent::init();

		// note: these two fields originate from FieldtypeFile. 
		// Initializing them here ensures this Inputfield has the values set automatically.
		$this->set('extensions', '');
		$this->set('maxFiles', 0); 
		$this->set('maxFilesize', 0); 
		$this->set('useTags', 0);

		// native to this Inputfield
		$this->set('unzip', 0); 
		$this->set('overwrite', 0); 
		$this->set('descriptionRows', 1); 
		$this->set('destinationPath', ''); 
		$this->set('itemClass', 'InputfieldFileItem ui-widget ui-widget-content'); 
		$this->set('descriptionFieldLabel', $this->_('Description')); // Description field label
		$this->set('tagsFieldLabel', $this->_('Tags')); // Tags field label
		$this->set('noUpload', 0); // set to 1 to disable uploading to this field
		$this->set('noLang', 0); 
		$this->set('noAjax', 0); // disable ajax uploading
		$this->attr('type', 'file'); 

		// get the max filesize
		$filesize = trim(ini_get('post_max_size'));
		$last = strtolower(substr($filesize, -1));
		if($last == 'g') $this->maxFilesize = (($filesize*1024)*1024)*1024;
			else if($last == 'm') $this->maxFilesize = ($filesize*1024)*1024;
			else if($last == 'k') $this->maxFilesize = $filesize*1024;
			else $this->maxFilesize = (5*1024)*1024; 
		
		if($this->wire('input')->get('uploadOnlyMode')) $this->uploadOnlyMode = true; 
	}

	/**
	 * Per Inputfield interface, returns true when this field is empty
	 *
	 */
	public function isEmpty() {
		return !count($this->value);
	}

	/**
	 * Check to ensure that the containing form as an 'enctype' attr needed for uploading files
	 *
	 */
	protected function checkFormEnctype() {
		$parent = $this->parent;
		while($parent) {
			if($parent->attr('method') == 'post') {
				if(!$parent->attr('enctype')) $parent->attr('enctype', 'multipart/form-data');
				break;
			}
			$parent = $parent->parent; 
		}
	}

	/**
	 * Set the parent of this Inputfield
	 *
	 * @param InputfieldWrapper $parent
	 * @return this
	 *
	 */
	public function setParent(InputfieldWrapper $parent) {
		parent::setParent($parent); 
		$this->checkFormEnctype();
		return $this;
	}

	protected function pagefileId(Pagefile $pagefile) {
		return $this->name . "_" . $pagefile->hash; 
	}

	protected function renderItemDescriptionField(Pagefile $pagefile, $id, $n) {
		
		$out = '';
		$tabs = '';
		static $hasLangTabs = null;

		if($this->descriptionRows > 0) {

			$userLanguage = $this->wire('user')->language;
			$languages = $this->noLang ? null : $this->wire('languages');

			if(!$userLanguage || !$languages || $languages->count() < 2) {
				$numLanguages = 0;
				$languages = array(null);
			} else {
				$numLanguages = $languages->count();
				if(is_null($hasLangTabs)) $hasLangTabs = $this->wire('modules')->isInstalled('LanguageTabs');
			}

			foreach($languages as $language) {

				$descriptionFieldName = "description_$id";
				$descriptionFieldLabel = $this->descriptionFieldLabel;
				$labelClass = "detail";

				if($language) {
					$descriptionFieldLabel = (string) $language->getUnformatted('title');
					if(empty($descriptionFieldLabel)) $descriptionFieldLabel = $language->get('name');
					$descriptionFieldLabel = $this->wire('sanitizer')->entities($descriptionFieldLabel);
					if(!$language->isDefault()) $descriptionFieldName = "description{$language->id}_$id";
					$tabID = "langTab_{$id}__$language";
					$tabs .= "<li><a href='#$tabID'>" . $language->get('title|name') . "</a></li>";
					$out .= "<div class='InputfieldFileDescription LanguageSupport' data-language='$language' id='$tabID'>"; // open wrapper
					$labelClass .= ' LanguageSupportLabel';
				} else {
					$out .= "<div class='InputfieldFileDescription'>"; // open wrapper
				}

				$out .= "<label for='$descriptionFieldName' class='$labelClass'>$descriptionFieldLabel</label>";

				$description = $this->wire('sanitizer')->entities($pagefile->description($language));

				if($this->descriptionRows > 1) {
					$out .= "<textarea name='$descriptionFieldName' id='$descriptionFieldName' rows='{$this->descriptionRows}'>$description</textarea>";
				} else {
					$out .= "<input type='text' name='$descriptionFieldName' id='$descriptionFieldName' value='$description' />";
				}

				$out .= "</div>"; // close wrapper
			}
			
			if($numLanguages && $hasLangTabs) {
				$ajax = $this->wire('config')->ajax;
				$out = "<div class='hasLangTabs langTabsContainer'><div class='langTabs'><ul>$tabs</ul>$out</div></div>";
				if($ajax) $out .= "<script>setupLanguageTabs($('#wrap_" . $this->attr('id') . "'));</script>";
			}

		}
		

		if($this->useTags) {
			$tags = $this->wire('sanitizer')->entities($pagefile->tags);
			$out .= "<span class='InputfieldFileTags'>" .
				"<label for='tags_$id' class='detail'>{$this->tagsFieldLabel}</label>" .
				"<input type='text' name='tags_$id' id='tags_$id' value='$tags' />" .
				"</span>";
		}

		return $out;
	}

	protected function ___renderItem($pagefile, $id, $n) {
	
		$out = 
			"\n\t\t<p class='InputfieldFileInfo InputfieldItemHeader ui-state-default ui-widget-header'>" . 
			"\n\t\t\t" . wireIconMarkupFile($pagefile->basename, "fa-fw HideIfEmpty") . 
			//"\n\t\t\t<i class='fa fa-fw fa-caret-right HideIfMultiple'></i>" . 
			"\n\t\t\t<a class='InputfieldFileName' target='_blank' href='{$pagefile->url}'>{$pagefile->basename}</a> " . 
			"\n\t\t\t<span class='InputfieldFileStats'>" . str_replace(' ', '&nbsp;', $pagefile->filesizeStr) . "</span> " . 
			"\n\t\t\t<label class='InputfieldFileDelete'>" . 
				"<input type='checkbox' name='delete_$id' value='1' title='" . $this->_('Delete') . "' />" . 
				"<i class='fa fa-fw fa-trash'></i></label>" . 
			"\n\t\t</p>" . 
			"\n\t\t<div class='InputfieldFileData description ui-widget-content'>" . 
			"\n\t\t\t" . $this->renderItemDescriptionField($pagefile, $id, $n) . 
			"\n\t\t\t<input class='InputfieldFileSort' type='text' name='sort_$id' value='$n' />" . 
			"\n\t\t</div>";

		return $out; 
	}

	protected function renderItemWrap($out) {
		// note: using currentItem rather than a new argument since there are now a few modules extending
		// this one and if they implement their own calls to this method or version of this method then 
		// they will get strict notices from php if we add a new argument here. 
		$item = $this->currentItem; 
		$id = $item ? " id='file_$item->hash'" : "";
		return 	"\n\t<li$id class='{$this->itemClass}'>$out\n\t</li>";
	}

	protected function ___renderList($value) {

		if(!$value) return '';
		$out = '';
		$n = 0; 
		
		// if just rendering the files list (as opposed to saving it), delete any temp files that may have accumulated
		if(!$this->overwrite && !count($_POST) && !$this->config->ajax && !$this->uploadOnlyMode) {
			// don't delete files when in render single field or fields mode
			if(!$this->wire('input')->get('field') && !$this->wire('input')->get('fields')) {
				$value->deleteAllTemp();
			}
		}

		if(!$this->uploadOnlyMode) {
			foreach($value as $k => $pagefile) {
				$id = $this->pagefileId($pagefile);
				$this->currentItem = $pagefile;
				$out .= $this->renderItemWrap($this->renderItem($pagefile, $id, $n++));
			}
		}

		$class = 'InputfieldFileList ui-helper-clearfix';
		if($this->overwrite) $class .= " InputfieldFileOverwrite";
		if($out) $out = "\n<ul class='$class'>$out\n</ul>";
		
		return $out; 
	}

	protected function ___renderUpload($value) {
		if($this->noUpload) return;

		// enables user to choose more than one file
		if($this->maxFiles != 1) $this->setAttribute('multiple', 'multiple'); 

		$attrs = $this->getAttributes();
		unset($attrs['value']); 
		if(substr($attrs['name'], -1) != ']') $attrs['name'] .= '[]';

		$extensions = $this->extensions; 
		if($this->unzip && !$this->maxFiles) $extensions .= ' zip';

		$out =	
			"\n<p data-maxfilesize='{$this->maxFilesize}' data-extensions='{$extensions}' data-fieldname='$attrs[name]' class='InputfieldFileUpload'>" . 
			"\n\t<input type='hidden' class='InputfieldFileMaxFiles' value='{$this->maxFiles}' />" . 
			"\n\t<input " . $this->getAttributesString($attrs) . " />" . 
			"\n\t<span class='InputfieldFileValidExtensions detail'>" . htmlspecialchars(str_replace(' ', ', ', trim($extensions))) . "</span>";
		
		if(!$this->noAjax) $out .= 
			"\n\t<span class='AjaxUploadDropHere description'><i class='fa fa-upload'></i>&nbsp; " . $this->_('drag and drop files in here') . "</span>"; // Ajax upload instruction
		
		$out .= "\n</p>";

		return $out; 
	}

	public function ___render() {
		if(!$this->extensions) $this->error($this->_('No file extensions are defined for this field.')); 
		return $this->renderList($this->value) . $this->renderUpload($this->value);
	}

	protected function ___fileAdded(Pagefile $pagefile) {
		if($this->noUpload) return;
		
		$isValid = $this->wire('sanitizer')->validateFile($pagefile->filename(), array(
			'pagefile' => $pagefile
		));
		
		if($isValid === false) {
			$errors = $this->wire('sanitizer')->errors('clear array');
			throw new WireException(
				$this->_('File failed validation') . 
				(count($errors) ? ": " . implode(', ', $errors) : "")
			);
		} else if($isValid === null) {
			// there was no validator available for this file type
		}

		$message = $this->_('Added file:') . " {$pagefile->basename}"; // Label that precedes an added filename

		if($this->config->ajax && !$this->noAjax) {
			$n = count($this->value); 
			if($n) $n--; // for sorting
			$this->currentItem = $pagefile; 
			$markup = $this->renderItemWrap($this->renderItem($pagefile, $this->pagefileId($pagefile), $n));	
			$this->ajaxResponse(false, $message, $pagefile->url, $pagefile->filesize(), $markup); 
		} else {
			$this->message($message); 
		}
	}

	protected function ___processInputAddFile($filename) {

		$total = count($this->value); 
		$description = '';
		$tags = '';
		$isAjax = $this->config->ajax; 
		$rm = null;

		if($this->maxFiles > 1 && $total >= $this->maxFiles) return; 
		
		// allow replacement of file if maxFiles is 1
		if($this->maxFiles == 1 && $total) {
			$pagefile = $this->value->first();
			$description = $pagefile->description;
			$tags = $pagefile->tags;
			$rm = true; 
			if($filename == $pagefile->basename) {
				// use overwrite mode rather than replace mode when single file and same filename
				if($this->overwrite) $rm = false;
			}
			if($rm) {
				if($this->overwrite) $this->processInputDeleteFile($pagefile);
				$this->singleFileReplacement = true; 
			}
		} 
	
		if($this->overwrite) {
			$pagefile = $this->value->get($filename); 
			clearstatcache();
			if($pagefile) {
				// already have a file of the same name
				if($pagefile instanceof Pageimage) $pagefile->removeVariations(); 
				$description = $pagefile->description;
				$tags = $pagefile->tags;
			} else {
				// we don't have a file with the same name as the one that was uploaded
				// file must be in another files field on the same page, that could be problematic
				$ul = $this->getWireUpload();
				// see if any files were overwritten that weren't part of our field
				// if so, we need to restore them and issue an error
				$err = false;
				foreach($ul->getOverwrittenFiles() as $bakFile => $newFile) {
					if(basename($newFile) != $filename) continue; 
					unlink($newFile); 	
					rename($bakFile, $newFile); // restore
					$ul->error(sprintf($this->_('Refused file %s because it is already on the file system and owned by a different field.'), $filename)); 
					$err = true; 
				}
				if($err) return;
			}
		}

		$this->value->add($filename); 
		$item = $this->value->last();
		
		try {
			if($description) $item->description = $description;
			if($tags) $item->tags = $tags;
			// items saved in ajax or uploadOnly mode are temporary till saved in non-ajax/non-uploadOnly
			if($isAjax && !$this->overwrite) $item->isTemp(true); 
			$this->fileAdded($item); 
		} catch(Exception $e) {
			$item->unlink();
			$this->value->remove($item); 
			throw new WireException($e->getMessage()); 
		}
	}

	protected function ___processInputDeleteFile(Pagefile $pagefile) {
		$this->message($this->_("Deleted file:") . " $pagefile"); // Label that precedes a deleted filename
		$this->value->delete($pagefile); 
	}

	protected function ___processInputFile(WireInputData $input, Pagefile $pagefile, $n) {

		$id = $this->name . '_' . $pagefile->hash;
	
		if($this->uploadOnlyMode) {
			// skip files that aren't present as just uploaded
			$key = "sort_$id";
			if($input->$key === null) return false;
		}
		
		$changed = false; 
		$languages = $this->noLang ? null : $this->wire('languages'); 
		$keys = $languages ? array('tags') : array('description', 'tags'); 

		foreach($keys as $key) { 
			if(isset($input[$key . '_' . $id])) { 
				$value = trim($input[$key . '_' . $id]); 
				if($value != $pagefile->$key) {
					$pagefile->$key = $value; 
					$changed = true; 
				}
			}
		}

		// multi-language descriptions
		if($languages) foreach($languages as $language) {
			$key = $language->isDefault() ? "description_$id" : "description{$language->id}_$id";
			if(!isset($input[$key])) continue; 
			$value = trim($input[$key]); 
			if($value != $pagefile->description($language)) {
				$pagefile->description($language, $value); 
				$changed = true; 
			}
		}
		
		if($this->uploadOnlyMode) {
			$sort = null;
			$changed = true; 
		} else {
			$key = "sort_$id";
			$sort = $input->$key;
			if($sort !== null) {
				$sort = (int) $sort; 
				$pagefile->sort = $sort;
				if($n !== $sort) $changed = true;
			}
		}

		if(isset($input['delete_' . $id])) {
			$this->processInputDeleteFile($pagefile); 
			$changed = true; 
			
		} else if(!$this->config->ajax && !$this->overwrite && $pagefile->isTemp() && $sort !== null) {
			// if page saved with temporary items when not ajax, those temporary items become non-temp
			$pagefile->isTemp(false);
			if($this->maxFiles == 1) while(count($this->value) > 1) {
				$item = $this->value->first();
				$this->value->remove($item);
			}
			$changed = true;
		}

		return $changed; 
	}

	public function ___processInput(WireInputData $input) {
		
		if(is_null($this->value)) $this->value = new Pagefiles($this->wire('page'));
		if(!$this->destinationPath) $this->destinationPath = $this->value->path();
		if(!$this->destinationPath || !is_dir($this->destinationPath)) return $this->error($this->_("destinationPath is empty or does not exist"));
		if(!is_writable($this->destinationPath)) return $this->error($this->_("destinationPath is not writable"));

		$changed = false; 
		$total = count($this->value); 

		if(!$this->noUpload) { 

			if($this->maxFiles <= 1 || $total < $this->maxFiles) { 

				$ul = $this->getWireUpload();
				$ul->setName($this->attr('name')); 
				$ul->setDestinationPath($this->destinationPath); 
				$ul->setOverwrite($this->overwrite); 
				$ul->setAllowAjax($this->noAjax ? false : true);
				if($this->maxFilesize) $ul->setMaxFileSize($this->maxFilesize); 

				if($this->maxFiles == 1) {
					$ul->setMaxFiles(1); 

				} else if($this->maxFiles) {
					$maxFiles = $this->maxFiles - $total; 
					$ul->setMaxFiles($maxFiles); 

				} else if($this->unzip) { 
					$ul->setExtractArchives(true); 
				}

				$ul->setValidExtensions(explode(' ', trim($this->extensions))); 

				foreach($ul->execute() as $filename) {
					$this->processInputAddFile($filename); 
					$changed = true; 
				}

				if($this->config->ajax && !$this->noAjax) foreach($ul->getErrors() as $error) { 
					$this->ajaxResponse(true, $error); 
				}

			} else if($this->maxFiles) {
				// over the limit
				$this->ajaxResponse(true, $this->_("Max file upload limit reached")); 
			}
		}

		$n = 0; 

		foreach($this->value as $pagefile) {
			if($this->processInputFile($input, $pagefile, $n)) $changed = true; 
			$n++; 
		}

		if($changed) {
			$this->value->sort('sort'); 
			$this->trackChange('value'); 
		}

		if(count($this->ajaxResponses) && $this->config->ajax) {
			echo json_encode($this->ajaxResponses); 
		}

		return $this; 
	}

	/**
	 * Send an ajax response
	 *
	 * $error bool Whether it was successful
	 * $message string Message you want to return
	 * $file string Full path and filename or blank if not applicable
	 *
	 */
	protected function ajaxResponse($error, $message, $file = '', $size = '', $markup = '') {
		$response = array(
			'error' => $error, 
			'message' => $message, 
			'file' => $file,
			'size' => $size,
			'markup' => $markup, 
			'replace' => $this->singleFileReplacement,
			'overwrite' => $this->overwrite
			);

		$this->ajaxResponses[] = $response; 
	}

	/**
	 * Return the current WireUpload instance or create a new one if not yet created
	 *
	 * @return WireUpload
	 *
	 */
	public function getWireUpload() {
		if(is_null($this->wireUpload)) $this->wireUpload = new WireUpload($this->attr('name')); 
		return $this->wireUpload; 
	}


	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields();
		
		$f = $this->modules->get("InputfieldCheckbox"); 
		$f->attr('name', 'unzip'); 
		$f->attr('value', 1); 
		$f->setAttribute('checked', $this->unzip ? 'checked' : ''); 
		$f->label = $this->_('Decompress ZIP files?');
		$f->description = $this->_("If checked, ZIP archives will be decompressed and all valid files added as uploads (if supported by the hosting environment). Max files must be set to 0 (no max) in order for ZIP uploads to be functional."); // Decompress ZIP files description
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->append($f);
		
		$f = $this->modules->get("InputfieldCheckbox");
		$f->attr('name', 'overwrite');
		$f->label = $this->_('Overwrite existing files?');
		$f->description = $this->_('If checked, a file uploaded with the same name as an existing file will replace the existing file (description and tags will remain). If not checked, uploaded filenames will be renamed to be unique.'); // Overwrite description
		$f->notes = $this->_('Please note that when this option is enabled, AJAX-uploaded files are saved with the page immediately at upload, rather than when you click "save". As a result, you may wish to leave this option unchecked unless you have a specific need for it.'); // Overwrite notes
		if($this->overwrite) $f->attr('checked', 'checked');
		$f->collapsed = Inputfield::collapsedBlank;
		$inputfields->append($f);

		$f = $this->modules->get("InputfieldInteger"); 
		$f->attr('name', 'descriptionRows'); 
		$f->attr('value', $this->descriptionRows !== null ? (int) $this->descriptionRows : 1); 
		//$f->minValue = 0; 
		//$f->maxValue = 30; 
		$f->label = $this->_('Number of rows for description field?');
		$f->description = $this->_("Enter the number of rows available for the file description field, or enter 0 to not have a description field."); // Number of rows description
		$inputfields->append($f); 
		
		if($this->wire('languages') && $this->descriptionRows >= 1) {
			$f = $this->modules->get("InputfieldCheckbox"); 
			$f->attr('name', 'noLang'); 
			$f->attr('value', 1); 
			$f->setAttribute('checked', $this->noLang ? 'checked' : ''); 
			$f->label = $this->_('Disable multi-language descriptions?');
			$f->description = $this->_('By default, descriptions are multi-language when you have Language Support installed. If you want to disable multi-language descriptions, check this box.'); // Disable multi-language description
			$inputfields->append($f); 
		}
		
		// @todo make noAjax option configurable

		return $inputfields; 	
	}



}
