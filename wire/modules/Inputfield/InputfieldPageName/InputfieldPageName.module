<?php

/**
 * An Inputfield for handling ProcessWire "name" fields
 *
 */
class InputfieldPageName extends InputfieldName implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Name',
			'version' => 104,
			'summary' => 'Text input validated as a ProcessWire Page name field',
			'permanent' => true, 
			);
	}

	public static $defaultReplacements = array(
		'ä' => 'a',  
		'ö' => 'o',  
		'ü' => 'u',  
		'đ' => 'dj',  
		'ж' => 'zh',  
		'х' => 'kh',  
		'ц' => 'tc',  
		'ч' => 'ch',  
		'ш' => 'sh',  
		'щ' => 'shch',    
		'ю' => 'iu',  
		'я' => 'ia',
		':' => '-',
		',' => '-',
		'à' => 'a',
		'á' => 'a',
		'â' => 'a',
		'è' => 'e',
		'é' => 'e',
		'ë' => 'e',
		'ê' => 'e',
		'ì' => 'i',
		'í' => 'i',
		'ï' => 'i',
		'î' => 'i',
		'ò' => 'o',
		'ó' => 'o',
		'ô' => 'o',
		'ù' => 'u',
		'ú' => 'u',
		'û' => 'u',
		'ñ' => 'n',
		'ç' => 'c',
		'č' => 'c',
		'ć' => 'c',
		'ď' => 'd',
		'ĺ' => 'l',
		'ľ' => 'l',
		'ń' => 'n',
		'ň' => 'n',
		'ŕ' => 'r',
		'ř' => 'r',
		'š' => 's',
		'ť' => 't',
		'ý' => 'y',
		'ž' => 'z',
		'а' => 'a',
		'б' => 'b',
		'в' => 'v',
		'г' => 'g',
		'д' => 'd',
		'е' => 'e',
		'ё' => 'e',
		'з' => 'z',
		'и' => 'i',
		'й' => 'i',
		'к' => 'k',
		'л' => 'l',
		'м' => 'm',
		'н' => 'n',
		'о' => 'o',
		'п' => 'p',
		'р' => 'r',
		'с' => 's',
		'т' => 't',
		'у' => 'u',
		'ф' => 'f',
		'ы' => 'y',
		'э' => 'e',
		'ę' => 'e',
		'ą' => 'a',
		'ś' => 's',
		'ł' => 'l',
		'ż' => 'z',
		'ź' => 'z',
		);


	public function init() {
		parent::init();
		$this->label = $this->_('Name'); // Field label for 'Name'
		$this->set('parentPage', null); 
		$this->set('sanitizeMethod', 'pageName');
		$this->set('languageSupportLabel', ''); 
		$this->description = $this->_("Any combination of letters (a-z), numbers (0-9), dashes or underscores (no spaces)."); // Field description describing what characters are allowed
	}

	public function ___render() {

		$url = $this->parentPage ? $this->parentPage->path : '';
		$out = '';
		
		if($this->languageSupportLabel) $out .= "<div class='LanguageSupport'>" . 
			"<label for='{$this->id}' class='LanguageSupportLabel detail'>$this->languageSupportLabel</label>";
		$value = $this->attr('value'); 

		$link = '';
		if($value && wire('modules')->isInstalled('LanguageSupportPageNames')) {
			if(strlen($value)) $link = "<a href='" . rtrim(wire('config')->urls->root, '/') . rtrim($url, '/') . "/$value/'>";
		}

		$p = "\n<p id='{$this->id}_path' class='InputfieldPageNameURL'>";
		if($link) $p .= $link;
		$p .= "$url<strong></strong>";
		if($link) $p .= "</a>";
		$p .= "</p>";


		$out .= $p;
		$out .= parent::___render();
		if($this->languageSupportLabel) $out .= "</div>";

		// make the replacements part of the JS config	
		$replacements = empty($this->replacements) ? self::$defaultReplacements : $this->replacements; 
		$this->config->js($this->className(), array('replacements' => $replacements)); 

		return $out; 
	}

	static public function replacementStringToArray($str) {
		$r = preg_split('/[\r\n]+/', $str); 
		$a = array();
		foreach($r as $key => $value) {
			if(!strpos($value, '=')) continue; 
			list($k, $v) = explode('=', $value);
			$a[trim($k)] = trim($v); 	
		}
		return $a; 
	}

	static public function replacementArrayToString(array $a) {
		$str = '';
		foreach($a as $k => $v) $str .= "$k=$v\n";
		return rtrim($str); 
	}

	static public function getModuleConfigInputfields(array $data) {

		$modules = wire('modules');
		$modules->addHookBefore('saveModuleConfigData', null, 'InputfieldPageName_saveModuleConfigData'); 

		$name = 'replacements';

		if(empty($data[$name])) $data[$name] = self::$defaultReplacements; 

		if(is_array($data[$name])) {
			// data already in right save format, but need it to be a string for editing
			if(empty($replacements)) $replacements = self::$defaultReplacements;
			$replacements = self::replacementArrayToString($data[$name]);

		} else {
			// data is a string so they must have just saved, but we want to save the array version instead
			$replacements = $data[$name];
			$data[$name] = self::replacementStringToArray($replacements); 
		}

		$fields = new InputfieldWrapper();
		$field = $modules->get("InputfieldTextarea");
		$field->attr('name', $name);
		$field->attr('value', $replacements);
		$field->attr('rows', 15); 
		$field->label = "Character replacements";
		$field->description =
			"Enter the replacements that will occur when a user is entering characters into a page name field. " . 
			"Enter one replacement per line in key=value format. " . 
			"Meaning, on each new line, enter the character(s) you want to replace followed by an equals sign '=' and the ascii character(s) you want to replace with.";

		$field->notes = "The replacement value for each must be one or more of: a-z, 0-9, dash, underscore or period.";
		$fields->append($field);

		return $fields;
	}
}

function InputfieldPageName_saveModuleConfigData(HookEvent $event) {
	$arguments = $event->arguments; 
	if($arguments[0] != 'InputfieldPageName') return; 
	$data = $arguments[1];
	$name = 'replacements';	
	if(!is_array($data[$name])) $data[$name] = InputfieldPageName::replacementStringToArray($data[$name]); 
	$arguments[1] = $data; 
	$event->arguments = $arguments; 
}

