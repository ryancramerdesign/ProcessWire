<?php

/**
 * An Inputfield for handling ProcessWire "name" fields
 *
 */
class InputfieldPageName extends InputfieldName implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title' => 'Page Name',
			'version' => 104,
			'summary' => 'Text input validated as a ProcessWire Page name field',
			'permanent' => true, 
			);
	}

	public static $defaultReplacements = array(
            'ä' => 'ae',
            'æ' => 'ae',
            'ǽ' => 'ae',
            'ö' => 'o',
            'œ' => 'oe',
            'ü' => 'u',
            'Ä' => 'Ae',
            'Ü' => 'U',
            'Ö' => 'O',
            'À' => 'A',
            'Á' => 'A',
            'Â' => 'A',
            'Ã' => 'A',
            'Å' => 'A',
            'Ǻ' => 'A',
            'Ā' => 'A',
            'Ă' => 'A',
            'Ą' => 'A',
            'Ǎ' => 'A',
            'Α' => 'A',
            'Ά' => 'A',
            'Ả' => 'A',
            'Ạ' => 'A',
            'Ầ' => 'A',
            'Ẫ' => 'A',
            'Ẩ' => 'A',
            'Ậ' => 'A',
            'Ằ' => 'A',
            'Ắ' => 'A',
            'Ẵ' => 'A',
            'Ẳ' => 'A',
            'Ặ' => 'A',
            'А' => 'A',
            'à' => 'a',
            'á' => 'a',
            'â' => 'a',
            'ã' => 'a',
            'å' => 'a',
            'ǻ' => 'a',
            'ā' => 'a',
            'ă' => 'a',
            'ą' => 'a',
            'ǎ' => 'a',
            'ª' => 'a',
            'α' => 'a',
            'ά' => 'a',
            'ả' => 'a',
            'ạ' => 'a',
            'ầ' => 'a',
            'ấ' => 'a',
            'ẫ' => 'a',
            'ẩ' => 'a',
            'ậ' => 'a',
            'ằ' => 'a',
            'ắ' => 'a',
            'ẵ' => 'a',
            'ẳ' => 'a',
            'ặ' => 'a',
            'а' => 'a',
            'Б' => 'B',
            'б' => 'b',
            'Ç' => 'C',
            'Ć' => 'C',
            'Ĉ' => 'C',
            'Ċ' => 'C',
            'Č' => 'C',
            'ç' => 'c',
            'ć' => 'c',
            'ĉ' => 'c',
            'ċ' => 'c',
            'č' => 'c',
            'Д' => 'D',
            'д' => 'd',
            'Ð' => 'Dj',
            'Ď' => 'Dj',
            'Đ' => 'Dj',
            'Δ' => 'Dj',
            'ð' => 'dj',
            'ď' => 'dj',
            'đ' => 'dj',
            'δ' => 'dj',
            'È' => 'E',
            'É' => 'E',
            'Ê' => 'E',
            'Ë' => 'E',
            'Ē' => 'E',
            'Ĕ' => 'E',
            'Ė' => 'E',
            'Ę' => 'E',
            'Ě' => 'E',
            'Ε' => 'E',
            'Έ' => 'E',
            'Ẽ' => 'E',
            'Ẻ' => 'E',
            'Ẹ' => 'E',
            'Ề' => 'E',
            'Ế' => 'E',
            'Ễ' => 'E',
            'Ể' => 'E',
            'Ệ' => 'E',
            'Е' => 'E',
            'Э' => 'E',
            'è' => 'e',
            'é' => 'e',
            'ê' => 'e',
            'ë' => 'e',
            'ē' => 'e',
            'ĕ' => 'e',
            'ė' => 'e',
            'ę' => 'e',
            'ě' => 'e',
            'έ' => 'e',
            'ε' => 'e',
            'ẽ' => 'e',
            'ẻ' => 'e',
            'ẹ' => 'e',
            'ề' => 'e',
            'ế' => 'e',
            'ễ' => 'e',
            'ể' => 'e',
            'ệ' => 'e',
            'е' => 'e',
            'э' => 'e',
            'Ф' => 'F',
            'ф' => 'f',
            'Ĝ' => 'G',
            'Ğ' => 'G',
            'Ġ' => 'G',
            'Ģ' => 'G',
            'Γ' => 'G',
            'Г' => 'G',
            'Ґ' => 'G',
            'ĝ' => 'g',
            'ğ' => 'g',
            'ġ' => 'g',
            'ģ' => 'g',
            'γ' => 'g',
            'г' => 'g',
            'ґ' => 'g',
            'Ĥ' => 'H',
            'Ħ' => 'H',
            'ĥ' => 'h',
            'ħ' => 'h',
            'Ì' => 'I',
            'Í' => 'I',
            'Î' => 'I',
            'Ï' => 'I',
            'Ĩ' => 'I',
            'Ī' => 'I',
            'Ĭ' => 'I',
            'Ǐ' => 'I',
            'Į' => 'I',
            'İ' => 'I',
            'Η' => 'I',
            'Ή' => 'I',
            'Ί' => 'I',
            'Ι' => 'I',
            'Ϊ' => 'I',
            'Ỉ' => 'I',
            'Ị' => 'I',
            'И' => 'I',
            'Ы' => 'I',
            'ì' => 'i',
            'í' => 'i',
            'î' => 'i',
            'ï' => 'i',
            'ĩ' => 'i',
            'ī' => 'i',
            'ĭ' => 'i',
            'ǐ' => 'i',
            'į' => 'i',
            'ı' => 'i',
            'η' => 'i',
            'ή' => 'i',
            'ί' => 'i',
            'ι' => 'i',
            'ϊ' => 'i',
            'ỉ' => 'i',
            'ị' => 'i',
            'и' => 'i',
            'ы' => 'i',
            'ї' => 'i',
            'Ĵ' => 'J',
            'ĵ' => 'j',
            'Ķ' => 'K',
            'Κ' => 'K',
            'К' => 'K',
            'ķ' => 'k',
            'κ' => 'k',
            'к' => 'k',
            'Ĺ' => 'L',
            'Ļ' => 'L',
            'Ľ' => 'L',
            'Ŀ' => 'L',
            'Ł' => 'L',
            'Λ' => 'L',
            'Л' => 'L',
            'ĺ' => 'l',
            'ļ' => 'l',
            'ľ' => 'l',
            'ŀ' => 'l',
            'ł' => 'l',
            'λ' => 'l',
            'л' => 'l',
            'М' => 'M',
            'м' => 'm',
            'Ñ' => 'N',
            'Ń' => 'N',
            'Ņ' => 'N',
            'Ň' => 'N',
            'Ν' => 'N',
            'Н' => 'N',
            'ñ' => 'n',
            'ń' => 'n',
            'ņ' => 'n',
            'ň' => 'n',
            'ŉ' => 'n',
            'ν' => 'n',
            'н' => 'n',
            'Ò' => 'O',
            'Ó' => 'O',
            'Ô' => 'O',
            'Õ' => 'O',
            'Ō' => 'O',
            'Ŏ' => 'O',
            'Ǒ' => 'O',
            'Ő' => 'O',
            'Ơ' => 'O',
            'Ø' => 'O',
            'Ǿ' => 'O',
            'Ο' => 'O',
            'Ό' => 'O',
            'Ω' => 'O',
            'Ώ' => 'O',
            'Ỏ' => 'O',
            'Ọ' => 'O',
            'Ồ' => 'O',
            'Ố' => 'O',
            'Ỗ' => 'O',
            'Ổ' => 'O',
            'Ộ' => 'O',
            'Ờ' => 'O',
            'Ớ' => 'O',
            'Ỡ' => 'O',
            'Ở' => 'O',
            'Ợ' => 'O',
            'О' => 'O',
            'ò' => 'o',
            'ó' => 'o',
            'ô' => 'o',
            'õ' => 'o',
            'ō' => 'o',
            'ŏ' => 'o',
            'ǒ' => 'o',
            'ő' => 'o',
            'ơ' => 'o',
            'ø' => 'o',
            'ǿ' => 'o',
            'º' => 'o',
            'ο' => 'o',
            'ό' => 'o',
            'ω' => 'o',
            'ώ' => 'o',
            'ỏ' => 'o',
            'ọ' => 'o',
            'ồ' => 'o',
            'ố' => 'o',
            'ỗ' => 'o',
            'ổ' => 'o',
            'ộ' => 'o',
            'ờ' => 'o',
            'ớ' => 'o',
            'ỡ' => 'o',
            'ở' => 'o',
            'ợ' => 'o',
            'о' => 'o',
            'П' => 'P',
            'п' => 'p',
            'Ŕ' => 'R',
            'Ŗ' => 'R',
            'Ř' => 'R',
            'Ρ' => 'R',
            'Р' => 'R',
            'ŕ' => 'r',
            'ŗ' => 'r',
            'ř' => 'r',
            'ρ' => 'r',
            'р' => 'r',
            'Ś' => 'S',
            'Ŝ' => 'S',
            'Ş' => 'S',
            'Ș' => 'S',
            'Š' => 'S',
            'Σ' => 'S',
            'С' => 'S',
            'ś' => 's',
            'ŝ' => 's',
            'ş' => 's',
            'ș' => 's',
            'š' => 's',
            'ſ' => 's',
            'σ' => 's',
            'ς' => 's',
            'с' => 's',
            'Ț' => 'T',
            'Ţ' => 'T',
            'Ť' => 'T',
            'Ŧ' => 'T',
            'τ' => 'T',
            'Т' => 'T',
            'ț' => 't',
            'ţ' => 't',
            'ť' => 't',
            'ŧ' => 't',
            'т' => 't',
            'Ù' => 'U',
            'Ú' => 'U',
            'Û' => 'U',
            'Ũ' => 'U',
            'Ū' => 'U',
            'Ŭ' => 'U',
            'Ů' => 'U',
            'Ű' => 'U',
            'Ų' => 'U',
            'Ư' => 'U',
            'Ǔ' => 'U',
            'Ǖ' => 'U',
            'Ǘ' => 'U',
            'Ǚ' => 'U',
            'Ǜ' => 'U',
            'Ủ' => 'U',
            'Ụ' => 'U',
            'Ừ' => 'U',
            'Ứ' => 'U',
            'Ữ' => 'U',
            'Ử' => 'U',
            'Ự' => 'U',
            'У' => 'U',
            'ù' => 'u',
            'ú' => 'u',
            'û' => 'u',
            'ũ' => 'u',
            'ū' => 'u',
            'ŭ' => 'u',
            'ů' => 'u',
            'ű' => 'u',
            'ų' => 'u',
            'ư' => 'u',
            'ǔ' => 'u',
            'ǖ' => 'u',
            'ǘ' => 'u',
            'ǚ' => 'u',
            'ǜ' => 'u',
            'υ' => 'u',
            'ύ' => 'u',
            'ϋ' => 'u',
            'ủ' => 'u',
            'ụ' => 'u',
            'ừ' => 'u',
            'ứ' => 'u',
            'ữ' => 'u',
            'ử' => 'u',
            'ự' => 'u',
            'у' => 'u',
            'Ý' => 'Y',
            'Ÿ' => 'Y',
            'Ŷ' => 'Y',
            'Υ' => 'Y',
            'Ύ' => 'Y',
            'Ϋ' => 'Y',
            'Ỳ' => 'Y',
            'Ỹ' => 'Y',
            'Ỷ' => 'Y',
            'Ỵ' => 'Y',
            'Й' => 'Y',
            'ý' => 'y',
            'ÿ' => 'y',
            'ŷ' => 'y',
            'ỳ' => 'y',
            'ỹ' => 'y',
            'ỷ' => 'y',
            'ỵ' => 'y',
            'й' => 'y',
            'В' => 'V',
            'в' => 'v',
            'Ŵ' => 'W',
            'ŵ' => 'w',
            'Ź' => 'Z',
            'Ż' => 'Z',
            'Ž' => 'Z',
            'Ζ' => 'Z',
            'З' => 'Z',
            'ź' => 'z',
            'ż' => 'z',
            'ž' => 'z',
            'ζ' => 'z',
            'з' => 'z',
            'Æ' => 'AE',
            'Ǽ' => 'AE',
            'ß' => 'ss',
            'Ĳ' => 'IJ',
            'ĳ' => 'ij',
            'Œ' => 'OE',
            'ƒ' => 'f',
            'ξ' => 'ks',
            'π' => 'p',
            'β' => 'v',
            'μ' => 'm',
            'ψ' => 'ps',
            'Ё' => 'Yo',
            'ё' => 'yo',
            'Є' => 'Ye',
            'є' => 'ye',
            'Ї' => 'Yi',
            'Ж' => 'Zh',
            'ж' => 'zh',
            'Х' => 'Kh',
            'х' => 'kh',
            'Ц' => 'Ts',
            'ц' => 'ts',
            'Ч' => 'Ch',
            'ч' => 'ch',
            'Ш' => 'Sh',
            'ш' => 'sh',
            'Щ' => 'Shch',
            'щ' => 'shch',
            'Ъ' => '',
            'ъ' => '',
            'Ь' => '',
            'ь' => '',
            'Ю' => 'Yu',
            'ю' => 'yu',
            'Я' => 'Ya',
            'я' => 'ya',
            ':' => '-',
            ',' => '-',
		);


	public function init() {
		parent::init();
		$this->label = $this->_('Name'); // Field label for 'Name'
		$this->set('parentPage', null); 
		$this->set('sanitizeMethod', 'pageName');
		$this->set('languageSupportLabel', ''); 
		$this->set('slashUrls', 1); // whether a trailing slash should be shown in the URL preview

		// optional checkbox associated with the input, for use with language support
		$this->set('checkboxName', ''); // leave blank to disable 
		$this->set('checkboxLabel', ''); 
		$this->set('checkboxValue', ''); 
		$this->set('checkboxChecked', false); 

		$this->description = $this->_("Any combination of letters (a-z), numbers (0-9), dashes or underscores (no spaces)."); // Field description describing what characters are allowed
	}

	public function ___render() {

		$url = $this->parentPage ? $this->parentPage->path : '';
		$out = '';
		$box = '';
		
		if($this->languageSupportLabel) {

			if($this->checkboxName) {
				$checked = $this->checkboxChecked ? " checked='checked'" : '';
				$name = wire('sanitizer')->entities($this->checkboxName); 
				$value = wire('sanitizer')->entities($this->checkboxValue); 
				$label = wire('sanitizer')->entities($this->checkboxLabel); 
				$box = "<label class='checkbox detail'><input type='checkbox' name='$name' value='$value'$checked /> $label</label>";
			}

			$label = wire('sanitizer')->entities($this->languageSupportLabel); 
			$id = wire('sanitizer')->entities($this->attr('id')); 
			$out .= "<div class='LanguageSupport'>" . 
					"<label for='$id' class='LanguageSupportLabel detail'>" . 
					"$label</label>";
		}

		$value = $this->attr('value'); 
		$link = '';

		if($value && wire('modules')->isInstalled('LanguageSupportPageNames')) {
			if(strlen($value)) $link = "<a href='" . rtrim(wire('config')->urls->root, '/') . rtrim($url, '/') . "/$value/'>";
		}
		
		$slashUrls = (int) $this->slashUrls;
		$p = "\n<p id='{$this->id}_path' data-slashUrls='$slashUrls' class='InputfieldPageNameURL'>";
		if($link) $p .= $link;
		$p .= "$url<strong></strong>";
		if($link) $p .= "</a>";
		$p .= "</p>";

		$out .= $p;
		$out .= parent::___render();
		if($this->languageSupportLabel) $out .= $box . "</div>";

		// make the replacements part of the JS config	
		$replacements = empty($this->replacements) ? self::$defaultReplacements : $this->replacements; 
		$this->config->js($this->className(), array('replacements' => $replacements)); 

		return $out; 
	}

	static public function replacementStringToArray($str) {
		$r = preg_split('/[\r\n]+/', $str); 
		$a = array();
		foreach($r as $key => $value) {
			if(!strpos($value, '=')) continue; 
			list($k, $v) = explode('=', $value);
			$a[trim($k)] = trim($v); 	
		}
		return $a; 
	}

	static public function replacementArrayToString(array $a) {
		$str = '';
		foreach($a as $k => $v) $str .= "$k=$v\n";
		return rtrim($str); 
	}

	static public function getModuleConfigInputfields(array $data) {

		$modules = wire('modules');
		$modules->addHookBefore('saveModuleConfigData', null, 'InputfieldPageName_saveModuleConfigData'); 

		$name = 'replacements';

		if(empty($data[$name])) $data[$name] = self::$defaultReplacements; 

		if(is_array($data[$name])) {
			// data already in right save format, but need it to be a string for editing
			if(empty($replacements)) $replacements = self::$defaultReplacements;
			$replacements = self::replacementArrayToString($data[$name]);

		} else {
			// data is a string so they must have just saved, but we want to save the array version instead
			$replacements = $data[$name];
			$data[$name] = self::replacementStringToArray($replacements); 
		}

		$fields = new InputfieldWrapper();
		$field = $modules->get("InputfieldTextarea");
		$field->attr('name', $name);
		$field->attr('value', $replacements);
		$field->attr('rows', 15); 
		$field->label = __('Character replacements');
		$field->description = __('Enter the replacements that will occur when a user is entering characters into a page name field. Enter one replacement per line in key=value format. Meaning, on each new line, enter the character(s) you want to replace followed by an equals sign "=" and the ascii character(s) you want to replace with.'); // Character replacements description
		$field->notes = __('The replacement value for each must be one or more of: a-z, 0-9, dash, underscore or period.'); // Character replacements notes
		$fields->append($field);

		return $fields;
	}
}

function InputfieldPageName_saveModuleConfigData(HookEvent $event) {
	$arguments = $event->arguments; 
	if($arguments[0] != 'InputfieldPageName') return; 
	$data = $arguments[1];
	$name = 'replacements';	
	if(!is_array($data[$name])) $data[$name] = InputfieldPageName::replacementStringToArray($data[$name]); 
	$arguments[1] = $data; 
	$event->arguments = $arguments; 
}

