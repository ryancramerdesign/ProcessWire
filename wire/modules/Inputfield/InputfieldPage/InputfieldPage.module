<?php

/**
 * An Inputfield for handling relational Page inputs
 *
 * Delegates the actual input control to a user-defined Inputfield derived from InputfieldSelect
 *
 */
class InputfieldPage extends Inputfield implements ConfigurableModule {

	protected $inputfieldWidget = null;

	protected static $defaultInputfieldClasses = array(
		// default options
		'InputfieldSelect',
		'InputfieldSelectMultiple',
		'InputfieldCheckboxes',
		'InputfieldRadios', 
		'InputfieldAsmSelect',
		'InputfieldPageListSelect', 
		'InputfieldPageAutocomplete',
		); 

	protected static $defaultConfig = array(
		'parent_id' => 0,
		'template_id' => 0,
		'inputfield' => '', 
		'labelFieldName' => '',
		'findPagesCode' => '',
		'findPagesSelector' => '',
		'addable' => 0,
		); 

	public static function getModuleInfo() {
		return array(
			'title' => 'Page',
			'version' => 101,
			'summary' => 'Select one or more pages',
			'permanent' => true, 
			);
	}

	public function __construct() {
		$this->set('inputfieldClasses', self::$defaultInputfieldClasses); 
		parent::__construct();
	}

	public function init() {
		foreach(self::$defaultConfig as $key => $value) {
			$this->set($key, $value);
		}
		$this->attr('value', new PageArray()); 
		parent::init();
	}

	public function has($key) {
		// ensures it accepts any config value (like those for delegate inputfields)
		return true; 
	}

	public function getSelectablePages(Page $page) {

		if($this->findPagesSelector) { 
			// a find() selector
			$children = $this->pages->find($this->findPagesSelector); 

		} else if($this->findPagesCode) {
			// php statement that returns a PageArray
			$pages = $this->pages; 	
			$children = eval($this->findPagesCode); 

		} else if($this->parent_id) {
			$parent = $this->fuel('pages')->get($this->parent_id); 
			if($parent) $children = $this->template_id ? $parent->children("templates_id={$this->template_id}, check_access=0, status<" . Page::statusUnpublished) : $parent->children("check_access=0, status<" . Page::statusUnpublished);

		} else if($this->template_id) {
			$children = $this->pages->find("templates_id={$this->template_id}, check_access=0, status<" . Page::statusUnpublished); 

		} else {
			$children = new PageArray();
		}

		return $children; 
	} 

	protected function getInputfield() {

		if($this->inputfieldWidget) return $this->inputfieldWidget; 

		$inputfield = $this->fuel('modules')->get($this->inputfield);
		if(!$inputfield) return null;

		$page = $this->page; 
		$process = $this->fuel('process'); 
		if($process && $process->className() == 'ProcessPageEdit') $page = $process->getPage();

		$inputfield->attr('name', $this->attr('name')); 
		$inputfield->attr('id', $this->attr('id')); 
		$inputfield->label = $this->label;
		$inputfield->description = $this->description; 

		if(method_exists($inputfield, 'addOption')) {
			$children = $this->getSelectablePages($page); 
			if($children) foreach($children as $child) {
				$label = $this->labelFieldName ? $child->get($this->labelFieldName) : $child->name; 
				$inputfield->addOption($child->id, $label); 
			}
		} else {
			if($this->parent_id) $inputfield->parent_id = $this->parent_id;
			if($this->template_id) $inputfield->template_id = $this->template_id; 
			if($this->findPagesSelector) $inputfield->findPagesSelector = $this->findPagesSelector; 
			$inputfield->labelFieldName = $this->labelFieldName; 
		}

		$ids = array();
		$value = $this->attr('value'); 
		if($value instanceof Page) $inputfield->attr('value', $value->id); // derefAsPage
			else if($value instanceof PageArray) foreach($value as $v) $inputfield->attr('value', $v->id); // derefAsPageArray

		// pass long any relevant configuration items
		foreach($this->data as $key => $value) {
			if(in_array($key, array('value', 'collapsed', 'required')) || array_key_exists($key, self::$defaultConfig)) continue; 
			$inputfield->set($key, $value); 
		}

		$this->inputfieldWidget = $inputfield;
		return $inputfield; 
	}


	public function ___render() {

		if(!$inputfield = $this->getInputfield()) { 
			$this->error("Not fully configured  / currently nonfunctional");
			return $this->name;
		}

		$out = 	"\n<div class='" . $inputfield->className() . "'>";
		$out .= $inputfield->render();
		$out .= $this->renderAddable();
		$out .= "\n</div>";

		return $out; 
	}

	protected function ___renderAddable() {

		if(!$this->addable || !$this->parent_id || !$this->template_id) return '';

		if($this->labelFieldName && $this->labelFieldName != 'title') return '';

		$parent = wire('pages')->get($this->parent_id); 

		$test = new Page();
		$test->template = wire('templates')->get($this->template_id); 
		$test->parent = $parent; 
		$test->id = -1; // prevents permissions check from failing

		if(!$parent->addable($test)) return ''; 
		if(!$test->publishable()) return '';

		$inputfield = wire('modules')->get($this->inputfield); 
		if(!$inputfield) return '';
		$key = "_{$this->name}_add_items";

		if($inputfield instanceof InputfieldHasArrayValue) {
			// multi value
			$description = $this->_('Enter the titles of the items you want to add, one per line. They will be created and added to your selection when you save the page.');
			$input = "<textarea id='$key' name='$key' rows='5'></textarea>";
		} else {
			// single value
			$description = $this->_('Enter the title of the item you want to add. It will become selected when you save the page.');
			$input = "<input type='text' name='$key' id='$key' />";
		}

		$notes = sprintf($this->_('New pages will be added to %s'), $parent->path);
		$label = $this->_('Create New'); 

		$out = 	"\n<div class='InputfieldPageAdd'>" . 	
			"\n\t<p class='InputfieldPageAddButton'>" . 
			"\n\t\t<span class='ui-icon ui-icon-plus'></span> " . 
			"\n\t\t<a href='#'>$label</a>" . 
			"\n\t</p>" . 
			"\n\t<p class='InputfieldPageAddItems'>" . 
			"\n\t\t<label class='description' for='$key'>$description</label>" . 
			"\n\t\t$input" . 
			"\n\t\t<span class='detail'>$notes</span>" . 
			"\n\t</p>" . 
			"\n</div>";

		return $out; 
	}

	public function ___processInput(WireInputData $input) {

		$inputfield = $this->getInputfield();
		if(!$inputfield) return $this;


		$inputfield->processInput($input); 

		$value = $this->attr('value'); 
		$existingValue = $value ? clone $value : '';
		$newValue = null;
		$value = $inputfield->value; 

		if(is_array($value)) {
			$newValue = new PageArray(); 
			foreach($value as $v) {
				$page = $this->fuel('pages')->get((int) $v); 
				$newValue->add($page); 
			}
		} else {
			if($value) $newValue = $this->fuel('pages')->get((int) $value); 
		}

		$this->setAttribute('value', $newValue); 

		if("$newValue" != "$existingValue") {
			$this->trackChange('value'); 
		} 

		$this->processInputAddPages($input);

		return $this; 
	}

	/**
	 * Check for the addable pages option and process if applicable
	 *
	 */
	protected function ___processInputAddPages($input) {

		if(!$this->addable || !$this->parent_id || !$this->template_id) return;

		$user = wire('user'); 

		$key = "_{$this->name}_add_items";
		$value = trim($input->$key); 
		if(empty($value)) return;

		$parent = $this->pages->get($this->parent_id);
		$sort = $parent->numChildren;
		$titles = explode("\n", $value); 
		$publishable = false;
		$n = 0;

		foreach($titles as $title) {

			$page = new Page();
			$page->template = $this->template_id; 
			$page->parent = $parent; 
			$page->title = trim($title); 
			$page->sort = $sort++;
			$page->id = -1; // prevents the permissions check from failing

			// on first iteration perform a page-context access check
			if(!$n && (!$parent->addable($page) || !$page->publishable())) {
				$this->error("No access to add {$page->template} pages to {$parent->path}"); 
				break;
			}
			$page->id = 0;

			try {
				$page->save();
				$this->message(sprintf($this->_('Added page %s'), $page->path)); 
				if($this->value instanceof PageArray) $this->value->add($page); 
					else $this->value = $page; 
				$this->trackChange('value'); 
				$n++;

			} catch(Exception $e) {
				$error = sprintf($this->_('Error adding page "%s"'), $page->title);
				if($user->isSuperuser()) $error .= " - " . $e->getMessage(); 
				$this->error($error); 
				break;
			}

			if($this->value instanceof Page) break;
		}
	}

	public function ___getConfigInputfields() {
		$inputfields = parent::___getConfigInputfields();

		$fieldset = wire('modules')->get('InputfieldFieldset'); 
		$fieldset->label = 'Selectable Pages';

		$field = $this->modules->get('InputfieldPageListSelect');
		$field->setAttribute('name', 'parent_id'); 
		$field->label = 'Parent of selectable page(s)';
		$field->attr('value', (int) $this->parent_id); 
		$field->description = "Select the parent of the pages that are selectable.";
		$field->required = false;
		$fieldset->append($field); 

		$field = $this->modules->get('InputfieldSelect');
		$field->setAttribute('name', 'template_id'); 
		$field->label = 'Template of selectable page(s)';
		$field->attr('value', (int) $this->template_id); 
		$field->description = "Select the template of the pages that are selectable. May be used instead of, or in addition to, the parent above. NOTE: Not compatible with PageListSelect input field types.";
		foreach($this->templates as $template) $field->addOption($template->id, $template->name); 
		$field->collapsed = Inputfield::collapsedBlank;
		$fieldset->append($field); 

		$field = $this->modules->get('InputfieldText'); 
		$field->attr('name', 'findPagesSelector'); 
		$field->label = "Custom selector to find selectable pages"; 
		$field->attr('value', $this->findPagesSelector); 
		$field->description = 
			"If you want to find selectable pages using a ProcessWire selector rather than selecting a parent page or template (above) then enter the selector to find the selectable pages. " . 
			"This selector will be passed to a \$pages->find('your selector'); statement. NOTE: Not currently compatible with PageListSelect input field types.";

		$field->notes = 'Example: parent=/products/, template=product, sort=name';
		$field->collapsed = Inputfield::collapsedBlank;
		$fieldset->append($field); 

		$field = $this->modules->get('InputfieldTextarea'); 
		$field->attr('name', 'findPagesCode'); 
		$field->label = "Custom PHP code to find selectable pages"; 
		$field->attr('value', $this->findPagesCode); 
		$field->attr('rows', 4); 
		$field->description = 
			"If you want to find selectable pages using a PHP code snippet rather than selecting a parent page or template (above) then enter the code to find the selectable pages. " . 
			"This statement has access to the \$page and \$pages API variables, where \$page refers to the page being edited. The snippet should return either a PageArray or NULL. " . 
			"Using this is optional, and if used, it overrides the parent/template/selector fields above. NOTE: Not compatible with PageListSelect or Autocomplete input field types.";

		$field->notes = 'Example: return $page->parent->parent->children("name=locations")->first()->children();';
		$field->collapsed = Inputfield::collapsedBlank;
		$fieldset->append($field); 
		$inputfields->append($fieldset); 

		$field = $this->modules->get('InputfieldSelect');
		$field->setAttribute('name', 'labelFieldName');
		$field->setAttribute('value', $this->labelFieldName); 
		$field->label = 'Label Field';
		$field->description = "Select the page field that you want to be used in generating the labels for each selectable page.";

                if($this->fuel('fields')->get('title')) {
                        $field->addOption('title', 'title (default)');
                        $field->addOption('name', 'name');
                        $titleIsDefault = true;
                } else {
			$field->addOption('name', 'name (default)');
			$titleIsDefault = false;
		}
		$field->addOption('path', 'path'); 

                foreach($this->fuel('fields') as $f) {
                        if(!$f->type instanceof FieldtypeText) continue;
			if($f->type instanceof FieldtypeTextarea) continue; 
                        if($titleIsDefault && $f->name == 'title') continue;
                        $field->addOption($f->name);
                }
		$inputfields->append($field); 

		if(!$this->inputfield) $this->inputfield = 'InputfieldSelect'; 
		$field = $this->modules->get('InputfieldSelect');
		$field->setAttribute('name', 'inputfield'); 
		$field->setAttribute('value', $this->inputfield); 
		$field->label = 'Input field type';
		$field->description = "The type of field that will be used to select a page. Select one that is consistent with the single page vs. multi-page needs you chose in the 'details' tab of this field.";
		$field->required = true; 
		$field->notes = "* Types indicated with an asterisk are optimized for multiple page selection.";

		foreach($this->inputfieldClasses as $class) {
			$module = $this->modules->get($class); 
			$label = str_replace("Inputfield", '', $class);
			if($module instanceof InputfieldHasArrayValue) $label .= "*"; 
			$field->addOption($class, $label); 
		}

		$inputfields->append($field); 	

		if($this->inputfield && $inputfield = $this->getInputfield()) {
			// then call again, knowing the module has it's config populated
			foreach($inputfield->___getConfigInputfields() as $f) {
				if(in_array($f->name, array('required', 'collapsed', 'columnWidth')) || array_key_exists($f->name, self::$defaultConfig)) continue; 
				$inputfields->add($f); 
			}
		}

		$field = $this->modules->get('InputfieldCheckbox');
		$field->attr('name', 'addable'); 
		$field->attr('value', 1); 
		$field->label = 'Allow new pages to be created from field?';
		$field->description = 'If checked, an option to add new page(s) will also be present if the indicated requirements are met.';
		$field->notes = 
			"1. Both a parent and template must be selected above." . "\n" . 
			"2. The editing user must have access to create/publish these pages." . "\n" . 
			"3. The label-field must be set to 'title (default)'.";

		if($this->addable) $field->attr('checked', 'checked'); 
			else $field->collapsed = Inputfield::collapsedYes;
		$inputfields->append($field); 

		return $inputfields; 
	}

	static public function getModuleConfigInputfields(array $data) {

		$name = 'inputfieldClasses';

		if(!isset($data[$name]) || !is_array($data[$name])) $data[$name] = self::$defaultInputfieldClasses; 
		$fields = new InputfieldWrapper();
		$modules = Wire::getFuel('modules');
		$field = $modules->get("InputfieldAsmSelect");
		$field->attr('name', $name);
		foreach(Wire::getFuel('modules')->find('className^=Inputfield') as $inputfield) {
			$field->addOption($inputfield->className(), str_replace('Inputfield', '', $inputfield->className())); 
		}
		$field->attr('value', $data[$name]); 
		$field->label = "Inputfield modules available for page selection";
		$field->description =
			"Select the Inputfield modules that may be used for page selection. These should generally be Inputfields that allow you to select one or more options.";
		$fields->append($field);

		return $fields;
	}



	
}
