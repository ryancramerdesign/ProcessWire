<?php

/**
 * ProcessWire Markdown Textformatter
 *
 * ProcessWire 2.x 
 * Copyright (C) 2015 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT

 * https://processwire.com
 *
 * Parsedown copyright Emanuil Rusev.
 * Markdown Extra copyright Michel Fortin.
 * Markdown invented by John Gruber.
 * 
 * @property int $flavor Markdown flavor (see flavor constants)
 *
 */

class TextformatterMarkdownExtra extends Textformatter implements ConfigurableModule {

	public static function getModuleInfo() {
		return array(
			'title'   => 'Markdown/Parsedown Extra',
			'version' => 129,
			'summary' => "Markdown extra and Parsedown extra lightweight markup language by Emanuil Rusev, Michel Fortin, John Gruber.",
		);
	}

	const flavorDefault = 8;
	const flavorParsedownExtra = 2;
	const flavorParsedown = 4;
	const flavorMarkdownExtra = 8;
	const flavorRCD = 16; // add RCD extensions to one of above, @see markdownExtensions() method
	
	public function __construct() {
		$this->set('flavor', self::flavorDefault); 
	}

	public function format(&$str) {
		$str = $this->markdown($str, $this->flavor); 
	}
	
	public function formatValue(Page $page, Field $field, &$value) {
		$value = $this->markdown($value, $this->flavor);
	}

	/**
	 * Given a string, return a version processed with markdown
	 * 
	 * @param $str String to process
	 * @param int $flavor Flavor of markdown (default=parsedown extra)
	 * @return string Processed string
	 * 
	 */
	public function markdown($str, $flavor = 0) {
		
		if($flavor & self::flavorParsedown) {
			// regular parsedown
			require_once(dirname(__FILE__) . "/parsedown/Parsedown.php");
			$parsedown = new Parsedown();
			$str = $parsedown->text($str);
			
		} else if($flavor & self::flavorParsedownExtra) {
			// parsedown extra 
			require_once(dirname(__FILE__) . "/parsedown/Parsedown.php");
			require_once(dirname(__FILE__) . "/parsedown-extra/ParsedownExtra.php");
			$extra = new ParsedownExtra();
			$str = $extra->text($str);
			
		} else {
			// markdown extra (default)
			require_once(dirname(__FILE__) . "/markdown.php");
			$str = Markdown($str);
		}
		
		if($flavor & self::flavorRCD) $this->markdownExtensions($str);
		
		return $str; 
	}

	
	/**
	 * A few RCD extentions to MarkDown syntax, to be executed after Markdown has already had it's way with the text
	 * 
	 * @param string $str
	 *
	 */
	public function markdownExtensions(&$str) {

		// add id attribute to a tag, when followed by a #myid
		if(strpos($str, '>#')) $str = preg_replace('/<([a-z][a-z0-9]*)([^>]*>.*?)(<\/\\1>)#([a-z][-_a-z0-9]*)\b/', '<$1 id="$4"$2$3', $str); 

		// add class attribute to tag when followed by a .myclass
		if(strpos($str, '>.')) $str = preg_replace('/<([a-z][a-z0-9]*)([^>]*>.*?)(<\/\\1>)\.([a-z][-_a-z0-9]*)\b/', '<$1 class="$4"$2$3', $str); 

		// href links open in new window when followed by a plus sign, i.e. [google](http://google.com)+
		if(strpos($str, '</a>+')) $str = preg_replace('/<a ([^>]+>.+?<\/a>)\+/', '<a target="_blank" $1', $str); 

		// strip out comments
		if(strpos($str, '/*') !== false) $str = preg_replace('{/\*.*?\*/}s', '', $str); 
		if(strpos($str, '//') !== false) $str = preg_replace('{^//.*$}m', '', $str); 
	}
	
	public static function getModuleConfigInputfields(array $data) {
		$inputfields = new InputfieldWrapper();
		$f = wire('modules')->get('InputfieldRadios');
		$f->attr('name', 'flavor');
		$f->label = __('Markdown flavor to use');
		$f->addOption(self::flavorParsedownExtra, 'Parsedown Extra (Emanuel Rusev)');
		$f->addOption(self::flavorParsedown, 'Parsedown (Emanuel Rusev)'); 
		$f->addOption(self::flavorMarkdownExtra, 'Markdown Extra (Michel Fortin)'); 
		$f->attr('value', isset($data['flavor']) ? (int) $data['flavor'] : self::flavorDefault); 
		$inputfields->add($f);
		return $inputfields; 
	}
}
