<?php

/**
 * ProcessWire Language Process, displays languages in Setup > Languages > 
 * 
 * It also contains the hooks for altering the output of the InputfieldFile to hold language info and links.
 * This is the process assigned to processwire/setup/languages/.
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class ProcessLanguage extends ProcessPageType {

	static public function getModuleInfo() {
		return array(
			'title' => __('Languages', __FILE__),
			'version' => 100,
			'summary' => __('Manage system languages', __FILE__),
			'author' => 'Ryan Cramer',
			'requires' => 'LanguageSupport',
			);
	}

	/**
	 * The URL to the language-translator page (typically admin/setup/language-translator/)
	 *
	 */
	protected $translationUrl = '';

	/**
	 * Array of messages for language_files, indexed by file basename
	 *
	 */
	protected $fileMessages = array();

	/**
	 * Populate the fields shown in the default language list output
	 *
	 */
	public function __construct() {
		parent::__construct();
		$this->set('showFields', array('name', 'title', 'language_files'));
		require_once(dirname(__FILE__) . '/LanguageParser.php'); 
	}

	/**
	 * Add InputfieldFile hooks 
	 *
	 */
	public function init() {
		$this->addHookAfter('InputfieldFile::renderItem', $this, 'renderInputfieldFileItem'); 
		$this->addHookAfter('InputfieldFile::renderUpload', $this, 'renderInputfieldFileUpload'); 
		parent::init();
	}

	protected function translationUrl() {
		if(!$this->translationUrl) {
			$support = wire('modules')->get('LanguageSupport'); 
			$this->translationUrl = wire('pages')->get($support->languageTranslatorPageID)->url;
		}
		return $this->translationUrl; 
	}

	/**
	 * Hook for InputfieldFile::renderItem
	 *
	 * In this case we add an 'edit' link to the translator and some info about the translation file.
	 *
	 */
	public function renderInputfieldFileItem(HookEvent $event) {

		$translationUrl = $this->translationUrl(); 
		$pagefile = $event->arguments[0]; 
		$page = $pagefile->get('page'); 
		$textdomain = basename($pagefile->basename, '.json');

		$data = $page->translator->getTextdomain($textdomain);
		$file = $data['file']; 
		$pathname = wire('config')->paths->root . $file;
		$translations =& $data['translations'];
		$total = count($translations); 
		$parser = new LanguageParser($page->translator, $pathname);
		$untranslated = $parser->getUntranslated();
		$numPending = 0;
		$numAbandoned = 0;

		foreach($untranslated as $hash => $text) {
			if(!isset($translations[$hash]) || !strlen($translations[$hash]['text'])) $numPending++;
		}

		foreach($translations as $hash => $translation) {
			if(!isset($untranslated[$hash])) $numAbandoned++;
		}

		$total += $numAbandoned; 
		$message = sprintf($this->_n("%d phrase", "%d phrases", $total), $total);

		if($numAbandoned || $numPending) {
			$message .= " <span class='ui-state-error-text'>(";
			if($numAbandoned) $message .= sprintf($this->_('%d abandoned'), $numAbandoned); 
			if($numPending) $message .= ($numAbandoned ? ', ' : '') . sprintf($this->_('%d blank'), $numPending); 
			$message .= ")</span>";
		}

		$lastMod = date($this->config->dateFormat, filemtime($pagefile->filename)); 
		$editLabel = $this->_x('Edit', 'edit-language-file'); 

		$out = 	"<div class='InputfieldFileLanguageInfo'>" . 
			"<ul class='actions'>" . 
			"<li><a href='{$translationUrl}edit/?language_id={$page->id}&amp;textdomain=$textdomain'>$editLabel</a></li>" . 
			"</ul>" . 
			"<p><span class='InputfieldFileLanguageFilename'>/$file &#8212;</span> <span class='notes'>$message</span></p>" . 
			"</div>";

		$page->translator->unloadTextdomain($textdomain);

		$event->return .= $out; 

	}

	/**
	 * Hook for InputfieldFile::renderUpload
	 *
	 * This just adds a 'new' link to add a new translation file.
	 *
	 */
	public function renderInputfieldFileUpload(HookEvent $event) {

		$translationUrl = $this->translationUrl();
		$page = $event->arguments[0]->get('page'); 
		$label = $this->_('Translate New File'); 

		$out =	"<ul class='actions LanguageFilesActions'>" . 
			"<li><a href='{$translationUrl}add/?language_id={$page->id}'>$label</a></li>" . 
			"</ul>";

		$event->return .= $out;
	}

	/**
 	 * Modify the output per-field in the PageType list (template-method)
	 *
	 * In this case we make it return a count for the language_files
	 *
	 */
	protected function renderListFieldValue($name, $value) {
		if($name == 'language_files') {
			return count($value); 
		} else if($name == 'title') { 
			if(!$value) return '(blank)';
			return (string) $value;
		} else {
			return parent::renderListFieldValue($name, $value); 
		}
	}

}

